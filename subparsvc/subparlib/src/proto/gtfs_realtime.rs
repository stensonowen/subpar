// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gtfs-realtime.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct FeedMessage {
    // message fields
    pub header: ::protobuf::SingularPtrField<FeedHeader>,
    pub entity: ::protobuf::RepeatedField<FeedEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedMessage {
    fn default() -> &'a FeedMessage {
        <FeedMessage as ::protobuf::Message>::default_instance()
    }
}

impl FeedMessage {
    pub fn new() -> FeedMessage {
        ::std::default::Default::default()
    }

    // required .transit_realtime.FeedHeader header = 1;


    pub fn get_header(&self) -> &FeedHeader {
        self.header.as_ref().unwrap_or_else(|| <FeedHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: FeedHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut FeedHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> FeedHeader {
        self.header.take().unwrap_or_else(|| FeedHeader::new())
    }

    // repeated .transit_realtime.FeedEntity entity = 2;


    pub fn get_entity(&self) -> &[FeedEntity] {
        &self.entity
    }
    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::protobuf::RepeatedField<FeedEntity>) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entity(&mut self) -> &mut ::protobuf::RepeatedField<FeedEntity> {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::protobuf::RepeatedField<FeedEntity> {
        ::std::mem::replace(&mut self.entity, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FeedMessage {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.entity {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entity)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.entity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.entity {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedMessage {
        FeedMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeedHeader>>(
                "header",
                |m: &FeedMessage| { &m.header },
                |m: &mut FeedMessage| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeedEntity>>(
                "entity",
                |m: &FeedMessage| { &m.entity },
                |m: &mut FeedMessage| { &mut m.entity },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeedMessage>(
                "FeedMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeedMessage {
        static instance: ::protobuf::rt::LazyV2<FeedMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedMessage::new)
    }
}

impl ::protobuf::Clear for FeedMessage {
    fn clear(&mut self) {
        self.header.clear();
        self.entity.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeedHeader {
    // message fields
    gtfs_realtime_version: ::protobuf::SingularField<::std::string::String>,
    incrementality: ::std::option::Option<FeedHeader_Incrementality>,
    timestamp: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedHeader {
    fn default() -> &'a FeedHeader {
        <FeedHeader as ::protobuf::Message>::default_instance()
    }
}

impl FeedHeader {
    pub fn new() -> FeedHeader {
        ::std::default::Default::default()
    }

    // required string gtfs_realtime_version = 1;


    pub fn get_gtfs_realtime_version(&self) -> &str {
        match self.gtfs_realtime_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_gtfs_realtime_version(&mut self) {
        self.gtfs_realtime_version.clear();
    }

    pub fn has_gtfs_realtime_version(&self) -> bool {
        self.gtfs_realtime_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gtfs_realtime_version(&mut self, v: ::std::string::String) {
        self.gtfs_realtime_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gtfs_realtime_version(&mut self) -> &mut ::std::string::String {
        if self.gtfs_realtime_version.is_none() {
            self.gtfs_realtime_version.set_default();
        }
        self.gtfs_realtime_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_gtfs_realtime_version(&mut self) -> ::std::string::String {
        self.gtfs_realtime_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;


    pub fn get_incrementality(&self) -> FeedHeader_Incrementality {
        self.incrementality.unwrap_or(FeedHeader_Incrementality::FULL_DATASET)
    }
    pub fn clear_incrementality(&mut self) {
        self.incrementality = ::std::option::Option::None;
    }

    pub fn has_incrementality(&self) -> bool {
        self.incrementality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_incrementality(&mut self, v: FeedHeader_Incrementality) {
        self.incrementality = ::std::option::Option::Some(v);
    }

    // optional uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for FeedHeader {
    fn is_initialized(&self) -> bool {
        if self.gtfs_realtime_version.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.gtfs_realtime_version)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.incrementality, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gtfs_realtime_version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.incrementality {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gtfs_realtime_version.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.incrementality {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedHeader {
        FeedHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gtfs_realtime_version",
                |m: &FeedHeader| { &m.gtfs_realtime_version },
                |m: &mut FeedHeader| { &mut m.gtfs_realtime_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FeedHeader_Incrementality>>(
                "incrementality",
                |m: &FeedHeader| { &m.incrementality },
                |m: &mut FeedHeader| { &mut m.incrementality },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &FeedHeader| { &m.timestamp },
                |m: &mut FeedHeader| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeedHeader>(
                "FeedHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeedHeader {
        static instance: ::protobuf::rt::LazyV2<FeedHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedHeader::new)
    }
}

impl ::protobuf::Clear for FeedHeader {
    fn clear(&mut self) {
        self.gtfs_realtime_version.clear();
        self.incrementality = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FeedHeader_Incrementality {
    FULL_DATASET = 0,
    DIFFERENTIAL = 1,
}

impl ::protobuf::ProtobufEnum for FeedHeader_Incrementality {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FeedHeader_Incrementality> {
        match value {
            0 => ::std::option::Option::Some(FeedHeader_Incrementality::FULL_DATASET),
            1 => ::std::option::Option::Some(FeedHeader_Incrementality::DIFFERENTIAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FeedHeader_Incrementality] = &[
            FeedHeader_Incrementality::FULL_DATASET,
            FeedHeader_Incrementality::DIFFERENTIAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FeedHeader_Incrementality>("FeedHeader.Incrementality", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FeedHeader_Incrementality {
}

impl ::std::default::Default for FeedHeader_Incrementality {
    fn default() -> Self {
        FeedHeader_Incrementality::FULL_DATASET
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedHeader_Incrementality {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeedEntity {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    is_deleted: ::std::option::Option<bool>,
    pub trip_update: ::protobuf::SingularPtrField<TripUpdate>,
    pub vehicle: ::protobuf::SingularPtrField<VehiclePosition>,
    pub alert: ::protobuf::SingularPtrField<Alert>,
    pub shape: ::protobuf::SingularPtrField<Shape>,
    pub stop: ::protobuf::SingularPtrField<Stop>,
    pub trip_modifications: ::protobuf::SingularPtrField<TripModifications>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedEntity {
    fn default() -> &'a FeedEntity {
        <FeedEntity as ::protobuf::Message>::default_instance()
    }
}

impl FeedEntity {
    pub fn new() -> FeedEntity {
        ::std::default::Default::default()
    }

    // required string id = 1;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_deleted = 2;


    pub fn get_is_deleted(&self) -> bool {
        self.is_deleted.unwrap_or(false)
    }
    pub fn clear_is_deleted(&mut self) {
        self.is_deleted = ::std::option::Option::None;
    }

    pub fn has_is_deleted(&self) -> bool {
        self.is_deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_deleted(&mut self, v: bool) {
        self.is_deleted = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TripUpdate trip_update = 3;


    pub fn get_trip_update(&self) -> &TripUpdate {
        self.trip_update.as_ref().unwrap_or_else(|| <TripUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trip_update(&mut self) {
        self.trip_update.clear();
    }

    pub fn has_trip_update(&self) -> bool {
        self.trip_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_update(&mut self, v: TripUpdate) {
        self.trip_update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_update(&mut self) -> &mut TripUpdate {
        if self.trip_update.is_none() {
            self.trip_update.set_default();
        }
        self.trip_update.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_update(&mut self) -> TripUpdate {
        self.trip_update.take().unwrap_or_else(|| TripUpdate::new())
    }

    // optional .transit_realtime.VehiclePosition vehicle = 4;


    pub fn get_vehicle(&self) -> &VehiclePosition {
        self.vehicle.as_ref().unwrap_or_else(|| <VehiclePosition as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehiclePosition) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehiclePosition {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehiclePosition {
        self.vehicle.take().unwrap_or_else(|| VehiclePosition::new())
    }

    // optional .transit_realtime.Alert alert = 5;


    pub fn get_alert(&self) -> &Alert {
        self.alert.as_ref().unwrap_or_else(|| <Alert as ::protobuf::Message>::default_instance())
    }
    pub fn clear_alert(&mut self) {
        self.alert.clear();
    }

    pub fn has_alert(&self) -> bool {
        self.alert.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert(&mut self, v: Alert) {
        self.alert = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alert(&mut self) -> &mut Alert {
        if self.alert.is_none() {
            self.alert.set_default();
        }
        self.alert.as_mut().unwrap()
    }

    // Take field
    pub fn take_alert(&mut self) -> Alert {
        self.alert.take().unwrap_or_else(|| Alert::new())
    }

    // optional .transit_realtime.Shape shape = 6;


    pub fn get_shape(&self) -> &Shape {
        self.shape.as_ref().unwrap_or_else(|| <Shape as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    pub fn has_shape(&self) -> bool {
        self.shape.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: Shape) {
        self.shape = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shape(&mut self) -> &mut Shape {
        if self.shape.is_none() {
            self.shape.set_default();
        }
        self.shape.as_mut().unwrap()
    }

    // Take field
    pub fn take_shape(&mut self) -> Shape {
        self.shape.take().unwrap_or_else(|| Shape::new())
    }

    // optional .transit_realtime.Stop stop = 7;


    pub fn get_stop(&self) -> &Stop {
        self.stop.as_ref().unwrap_or_else(|| <Stop as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop(&mut self) {
        self.stop.clear();
    }

    pub fn has_stop(&self) -> bool {
        self.stop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: Stop) {
        self.stop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop(&mut self) -> &mut Stop {
        if self.stop.is_none() {
            self.stop.set_default();
        }
        self.stop.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop(&mut self) -> Stop {
        self.stop.take().unwrap_or_else(|| Stop::new())
    }

    // optional .transit_realtime.TripModifications trip_modifications = 8;


    pub fn get_trip_modifications(&self) -> &TripModifications {
        self.trip_modifications.as_ref().unwrap_or_else(|| <TripModifications as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trip_modifications(&mut self) {
        self.trip_modifications.clear();
    }

    pub fn has_trip_modifications(&self) -> bool {
        self.trip_modifications.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_modifications(&mut self, v: TripModifications) {
        self.trip_modifications = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_modifications(&mut self) -> &mut TripModifications {
        if self.trip_modifications.is_none() {
            self.trip_modifications.set_default();
        }
        self.trip_modifications.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_modifications(&mut self) -> TripModifications {
        self.trip_modifications.take().unwrap_or_else(|| TripModifications::new())
    }
}

impl ::protobuf::Message for FeedEntity {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        for v in &self.trip_update {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.alert {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shape {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trip_modifications {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_deleted = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip_update)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alert)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shape)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip_modifications)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.is_deleted {
            my_size += 2;
        }
        if let Some(ref v) = self.trip_update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.alert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.shape.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.trip_modifications.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.is_deleted {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.trip_update.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.alert.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.shape.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.trip_modifications.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedEntity {
        FeedEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &FeedEntity| { &m.id },
                |m: &mut FeedEntity| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_deleted",
                |m: &FeedEntity| { &m.is_deleted },
                |m: &mut FeedEntity| { &mut m.is_deleted },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate>>(
                "trip_update",
                |m: &FeedEntity| { &m.trip_update },
                |m: &mut FeedEntity| { &mut m.trip_update },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehiclePosition>>(
                "vehicle",
                |m: &FeedEntity| { &m.vehicle },
                |m: &mut FeedEntity| { &mut m.vehicle },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Alert>>(
                "alert",
                |m: &FeedEntity| { &m.alert },
                |m: &mut FeedEntity| { &mut m.alert },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Shape>>(
                "shape",
                |m: &FeedEntity| { &m.shape },
                |m: &mut FeedEntity| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Stop>>(
                "stop",
                |m: &FeedEntity| { &m.stop },
                |m: &mut FeedEntity| { &mut m.stop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripModifications>>(
                "trip_modifications",
                |m: &FeedEntity| { &m.trip_modifications },
                |m: &mut FeedEntity| { &mut m.trip_modifications },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeedEntity>(
                "FeedEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeedEntity {
        static instance: ::protobuf::rt::LazyV2<FeedEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedEntity::new)
    }
}

impl ::protobuf::Clear for FeedEntity {
    fn clear(&mut self) {
        self.id.clear();
        self.is_deleted = ::std::option::Option::None;
        self.trip_update.clear();
        self.vehicle.clear();
        self.alert.clear();
        self.shape.clear();
        self.stop.clear();
        self.trip_modifications.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate {
    // message fields
    pub trip: ::protobuf::SingularPtrField<TripDescriptor>,
    pub vehicle: ::protobuf::SingularPtrField<VehicleDescriptor>,
    pub stop_time_update: ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate>,
    timestamp: ::std::option::Option<u64>,
    delay: ::std::option::Option<i32>,
    pub trip_properties: ::protobuf::SingularPtrField<TripUpdate_TripProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripUpdate {
    fn default() -> &'a TripUpdate {
        <TripUpdate as ::protobuf::Message>::default_instance()
    }
}

impl TripUpdate {
    pub fn new() -> TripUpdate {
        ::std::default::Default::default()
    }

    // required .transit_realtime.TripDescriptor trip = 1;


    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| <TripDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 3;


    pub fn get_vehicle(&self) -> &VehicleDescriptor {
        self.vehicle.as_ref().unwrap_or_else(|| <VehicleDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehicleDescriptor) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehicleDescriptor {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehicleDescriptor {
        self.vehicle.take().unwrap_or_else(|| VehicleDescriptor::new())
    }

    // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;


    pub fn get_stop_time_update(&self) -> &[TripUpdate_StopTimeUpdate] {
        &self.stop_time_update
    }
    pub fn clear_stop_time_update(&mut self) {
        self.stop_time_update.clear();
    }

    // Param is passed by value, moved
    pub fn set_stop_time_update(&mut self, v: ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate>) {
        self.stop_time_update = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stop_time_update(&mut self) -> &mut ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate> {
        &mut self.stop_time_update
    }

    // Take field
    pub fn take_stop_time_update(&mut self) -> ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate> {
        ::std::mem::replace(&mut self.stop_time_update, ::protobuf::RepeatedField::new())
    }

    // optional uint64 timestamp = 4;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional int32 delay = 5;


    pub fn get_delay(&self) -> i32 {
        self.delay.unwrap_or(0)
    }
    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;


    pub fn get_trip_properties(&self) -> &TripUpdate_TripProperties {
        self.trip_properties.as_ref().unwrap_or_else(|| <TripUpdate_TripProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trip_properties(&mut self) {
        self.trip_properties.clear();
    }

    pub fn has_trip_properties(&self) -> bool {
        self.trip_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_properties(&mut self, v: TripUpdate_TripProperties) {
        self.trip_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_properties(&mut self) -> &mut TripUpdate_TripProperties {
        if self.trip_properties.is_none() {
            self.trip_properties.set_default();
        }
        self.trip_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_properties(&mut self) -> TripUpdate_TripProperties {
        self.trip_properties.take().unwrap_or_else(|| TripUpdate_TripProperties::new())
    }
}

impl ::protobuf::Message for TripUpdate {
    fn is_initialized(&self) -> bool {
        if self.trip.is_none() {
            return false;
        }
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_time_update {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trip_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.stop_time_update)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.stop_time_update {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.trip_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.stop_time_update {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.delay {
            os.write_int32(5, v)?;
        }
        if let Some(ref v) = self.trip_properties.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate {
        TripUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                "trip",
                |m: &TripUpdate| { &m.trip },
                |m: &mut TripUpdate| { &mut m.trip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehicleDescriptor>>(
                "vehicle",
                |m: &TripUpdate| { &m.vehicle },
                |m: &mut TripUpdate| { &mut m.vehicle },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeUpdate>>(
                "stop_time_update",
                |m: &TripUpdate| { &m.stop_time_update },
                |m: &mut TripUpdate| { &mut m.stop_time_update },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &TripUpdate| { &m.timestamp },
                |m: &mut TripUpdate| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "delay",
                |m: &TripUpdate| { &m.delay },
                |m: &mut TripUpdate| { &mut m.delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_TripProperties>>(
                "trip_properties",
                |m: &TripUpdate| { &m.trip_properties },
                |m: &mut TripUpdate| { &mut m.trip_properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripUpdate>(
                "TripUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripUpdate {
        static instance: ::protobuf::rt::LazyV2<TripUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripUpdate::new)
    }
}

impl ::protobuf::Clear for TripUpdate {
    fn clear(&mut self) {
        self.trip.clear();
        self.vehicle.clear();
        self.stop_time_update.clear();
        self.timestamp = ::std::option::Option::None;
        self.delay = ::std::option::Option::None;
        self.trip_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeEvent {
    // message fields
    delay: ::std::option::Option<i32>,
    time: ::std::option::Option<i64>,
    uncertainty: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripUpdate_StopTimeEvent {
    fn default() -> &'a TripUpdate_StopTimeEvent {
        <TripUpdate_StopTimeEvent as ::protobuf::Message>::default_instance()
    }
}

impl TripUpdate_StopTimeEvent {
    pub fn new() -> TripUpdate_StopTimeEvent {
        ::std::default::Default::default()
    }

    // optional int32 delay = 1;


    pub fn get_delay(&self) -> i32 {
        self.delay.unwrap_or(0)
    }
    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = ::std::option::Option::Some(v);
    }

    // optional int64 time = 2;


    pub fn get_time(&self) -> i64 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional int32 uncertainty = 3;


    pub fn get_uncertainty(&self) -> i32 {
        self.uncertainty.unwrap_or(0)
    }
    pub fn clear_uncertainty(&mut self) {
        self.uncertainty = ::std::option::Option::None;
    }

    pub fn has_uncertainty(&self) -> bool {
        self.uncertainty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uncertainty(&mut self, v: i32) {
        self.uncertainty = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.uncertainty = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.uncertainty {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.delay {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.time {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.uncertainty {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeEvent {
        TripUpdate_StopTimeEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "delay",
                |m: &TripUpdate_StopTimeEvent| { &m.delay },
                |m: &mut TripUpdate_StopTimeEvent| { &mut m.delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "time",
                |m: &TripUpdate_StopTimeEvent| { &m.time },
                |m: &mut TripUpdate_StopTimeEvent| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "uncertainty",
                |m: &TripUpdate_StopTimeEvent| { &m.uncertainty },
                |m: &mut TripUpdate_StopTimeEvent| { &mut m.uncertainty },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripUpdate_StopTimeEvent>(
                "TripUpdate.StopTimeEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripUpdate_StopTimeEvent {
        static instance: ::protobuf::rt::LazyV2<TripUpdate_StopTimeEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripUpdate_StopTimeEvent::new)
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeEvent {
    fn clear(&mut self) {
        self.delay = ::std::option::Option::None;
        self.time = ::std::option::Option::None;
        self.uncertainty = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeUpdate {
    // message fields
    stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    pub arrival: ::protobuf::SingularPtrField<TripUpdate_StopTimeEvent>,
    pub departure: ::protobuf::SingularPtrField<TripUpdate_StopTimeEvent>,
    departure_occupancy_status: ::std::option::Option<VehiclePosition_OccupancyStatus>,
    schedule_relationship: ::std::option::Option<TripUpdate_StopTimeUpdate_ScheduleRelationship>,
    pub stop_time_properties: ::protobuf::SingularPtrField<TripUpdate_StopTimeUpdate_StopTimeProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripUpdate_StopTimeUpdate {
    fn default() -> &'a TripUpdate_StopTimeUpdate {
        <TripUpdate_StopTimeUpdate as ::protobuf::Message>::default_instance()
    }
}

impl TripUpdate_StopTimeUpdate {
    pub fn new() -> TripUpdate_StopTimeUpdate {
        ::std::default::Default::default()
    }

    // optional uint32 stop_sequence = 1;


    pub fn get_stop_sequence(&self) -> u32 {
        self.stop_sequence.unwrap_or(0)
    }
    pub fn clear_stop_sequence(&mut self) {
        self.stop_sequence = ::std::option::Option::None;
    }

    pub fn has_stop_sequence(&self) -> bool {
        self.stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_sequence(&mut self, v: u32) {
        self.stop_sequence = ::std::option::Option::Some(v);
    }

    // optional string stop_id = 4;


    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;


    pub fn get_arrival(&self) -> &TripUpdate_StopTimeEvent {
        self.arrival.as_ref().unwrap_or_else(|| <TripUpdate_StopTimeEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_arrival(&mut self) {
        self.arrival.clear();
    }

    pub fn has_arrival(&self) -> bool {
        self.arrival.is_some()
    }

    // Param is passed by value, moved
    pub fn set_arrival(&mut self, v: TripUpdate_StopTimeEvent) {
        self.arrival = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arrival(&mut self) -> &mut TripUpdate_StopTimeEvent {
        if self.arrival.is_none() {
            self.arrival.set_default();
        }
        self.arrival.as_mut().unwrap()
    }

    // Take field
    pub fn take_arrival(&mut self) -> TripUpdate_StopTimeEvent {
        self.arrival.take().unwrap_or_else(|| TripUpdate_StopTimeEvent::new())
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;


    pub fn get_departure(&self) -> &TripUpdate_StopTimeEvent {
        self.departure.as_ref().unwrap_or_else(|| <TripUpdate_StopTimeEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_departure(&mut self) {
        self.departure.clear();
    }

    pub fn has_departure(&self) -> bool {
        self.departure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_departure(&mut self, v: TripUpdate_StopTimeEvent) {
        self.departure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_departure(&mut self) -> &mut TripUpdate_StopTimeEvent {
        if self.departure.is_none() {
            self.departure.set_default();
        }
        self.departure.as_mut().unwrap()
    }

    // Take field
    pub fn take_departure(&mut self) -> TripUpdate_StopTimeEvent {
        self.departure.take().unwrap_or_else(|| TripUpdate_StopTimeEvent::new())
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus departure_occupancy_status = 7;


    pub fn get_departure_occupancy_status(&self) -> VehiclePosition_OccupancyStatus {
        self.departure_occupancy_status.unwrap_or(VehiclePosition_OccupancyStatus::EMPTY)
    }
    pub fn clear_departure_occupancy_status(&mut self) {
        self.departure_occupancy_status = ::std::option::Option::None;
    }

    pub fn has_departure_occupancy_status(&self) -> bool {
        self.departure_occupancy_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_departure_occupancy_status(&mut self, v: VehiclePosition_OccupancyStatus) {
        self.departure_occupancy_status = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;


    pub fn get_schedule_relationship(&self) -> TripUpdate_StopTimeUpdate_ScheduleRelationship {
        self.schedule_relationship.unwrap_or(TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED)
    }
    pub fn clear_schedule_relationship(&mut self) {
        self.schedule_relationship = ::std::option::Option::None;
    }

    pub fn has_schedule_relationship(&self) -> bool {
        self.schedule_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_relationship(&mut self, v: TripUpdate_StopTimeUpdate_ScheduleRelationship) {
        self.schedule_relationship = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties stop_time_properties = 6;


    pub fn get_stop_time_properties(&self) -> &TripUpdate_StopTimeUpdate_StopTimeProperties {
        self.stop_time_properties.as_ref().unwrap_or_else(|| <TripUpdate_StopTimeUpdate_StopTimeProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop_time_properties(&mut self) {
        self.stop_time_properties.clear();
    }

    pub fn has_stop_time_properties(&self) -> bool {
        self.stop_time_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_time_properties(&mut self, v: TripUpdate_StopTimeUpdate_StopTimeProperties) {
        self.stop_time_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_time_properties(&mut self) -> &mut TripUpdate_StopTimeUpdate_StopTimeProperties {
        if self.stop_time_properties.is_none() {
            self.stop_time_properties.set_default();
        }
        self.stop_time_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_time_properties(&mut self) -> TripUpdate_StopTimeUpdate_StopTimeProperties {
        self.stop_time_properties.take().unwrap_or_else(|| TripUpdate_StopTimeUpdate_StopTimeProperties::new())
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.arrival {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.departure {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_time_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stop_sequence = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.arrival)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.departure)?;
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.departure_occupancy_status, 7, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.schedule_relationship, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop_time_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.stop_sequence {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.arrival.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.departure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.departure_occupancy_status {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(v) = self.schedule_relationship {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        if let Some(ref v) = self.stop_time_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.stop_sequence {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.arrival.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.departure.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.departure_occupancy_status {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.schedule_relationship {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.stop_time_properties.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeUpdate {
        TripUpdate_StopTimeUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "stop_sequence",
                |m: &TripUpdate_StopTimeUpdate| { &m.stop_sequence },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_id",
                |m: &TripUpdate_StopTimeUpdate| { &m.stop_id },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeEvent>>(
                "arrival",
                |m: &TripUpdate_StopTimeUpdate| { &m.arrival },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.arrival },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeEvent>>(
                "departure",
                |m: &TripUpdate_StopTimeUpdate| { &m.departure },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.departure },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_OccupancyStatus>>(
                "departure_occupancy_status",
                |m: &TripUpdate_StopTimeUpdate| { &m.departure_occupancy_status },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.departure_occupancy_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TripUpdate_StopTimeUpdate_ScheduleRelationship>>(
                "schedule_relationship",
                |m: &TripUpdate_StopTimeUpdate| { &m.schedule_relationship },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.schedule_relationship },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeUpdate_StopTimeProperties>>(
                "stop_time_properties",
                |m: &TripUpdate_StopTimeUpdate| { &m.stop_time_properties },
                |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_time_properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripUpdate_StopTimeUpdate>(
                "TripUpdate.StopTimeUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripUpdate_StopTimeUpdate {
        static instance: ::protobuf::rt::LazyV2<TripUpdate_StopTimeUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripUpdate_StopTimeUpdate::new)
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeUpdate {
    fn clear(&mut self) {
        self.stop_sequence = ::std::option::Option::None;
        self.stop_id.clear();
        self.arrival.clear();
        self.departure.clear();
        self.departure_occupancy_status = ::std::option::Option::None;
        self.schedule_relationship = ::std::option::Option::None;
        self.stop_time_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeUpdate_StopTimeProperties {
    // message fields
    assigned_stop_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripUpdate_StopTimeUpdate_StopTimeProperties {
    fn default() -> &'a TripUpdate_StopTimeUpdate_StopTimeProperties {
        <TripUpdate_StopTimeUpdate_StopTimeProperties as ::protobuf::Message>::default_instance()
    }
}

impl TripUpdate_StopTimeUpdate_StopTimeProperties {
    pub fn new() -> TripUpdate_StopTimeUpdate_StopTimeProperties {
        ::std::default::Default::default()
    }

    // optional string assigned_stop_id = 1;


    pub fn get_assigned_stop_id(&self) -> &str {
        match self.assigned_stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_assigned_stop_id(&mut self) {
        self.assigned_stop_id.clear();
    }

    pub fn has_assigned_stop_id(&self) -> bool {
        self.assigned_stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_assigned_stop_id(&mut self, v: ::std::string::String) {
        self.assigned_stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_assigned_stop_id(&mut self) -> &mut ::std::string::String {
        if self.assigned_stop_id.is_none() {
            self.assigned_stop_id.set_default();
        }
        self.assigned_stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_assigned_stop_id(&mut self) -> ::std::string::String {
        self.assigned_stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeUpdate_StopTimeProperties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.assigned_stop_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.assigned_stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.assigned_stop_id.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeUpdate_StopTimeProperties {
        TripUpdate_StopTimeUpdate_StopTimeProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "assigned_stop_id",
                |m: &TripUpdate_StopTimeUpdate_StopTimeProperties| { &m.assigned_stop_id },
                |m: &mut TripUpdate_StopTimeUpdate_StopTimeProperties| { &mut m.assigned_stop_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripUpdate_StopTimeUpdate_StopTimeProperties>(
                "TripUpdate.StopTimeUpdate.StopTimeProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripUpdate_StopTimeUpdate_StopTimeProperties {
        static instance: ::protobuf::rt::LazyV2<TripUpdate_StopTimeUpdate_StopTimeProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripUpdate_StopTimeUpdate_StopTimeProperties::new)
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeUpdate_StopTimeProperties {
    fn clear(&mut self) {
        self.assigned_stop_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeUpdate_StopTimeProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate_StopTimeProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TripUpdate_StopTimeUpdate_ScheduleRelationship {
    SCHEDULED = 0,
    SKIPPED = 1,
    NO_DATA = 2,
    UNSCHEDULED = 3,
}

impl ::protobuf::ProtobufEnum for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TripUpdate_StopTimeUpdate_ScheduleRelationship> {
        match value {
            0 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED),
            1 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::SKIPPED),
            2 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::NO_DATA),
            3 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::UNSCHEDULED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TripUpdate_StopTimeUpdate_ScheduleRelationship] = &[
            TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::SKIPPED,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::NO_DATA,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::UNSCHEDULED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TripUpdate_StopTimeUpdate_ScheduleRelationship>("TripUpdate.StopTimeUpdate.ScheduleRelationship", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TripUpdate_StopTimeUpdate_ScheduleRelationship {
}

impl ::std::default::Default for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn default() -> Self {
        TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_TripProperties {
    // message fields
    trip_id: ::protobuf::SingularField<::std::string::String>,
    start_date: ::protobuf::SingularField<::std::string::String>,
    start_time: ::protobuf::SingularField<::std::string::String>,
    shape_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripUpdate_TripProperties {
    fn default() -> &'a TripUpdate_TripProperties {
        <TripUpdate_TripProperties as ::protobuf::Message>::default_instance()
    }
}

impl TripUpdate_TripProperties {
    pub fn new() -> TripUpdate_TripProperties {
        ::std::default::Default::default()
    }

    // optional string trip_id = 1;


    pub fn get_trip_id(&self) -> &str {
        match self.trip_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_trip_id(&mut self) {
        self.trip_id.clear();
    }

    pub fn has_trip_id(&self) -> bool {
        self.trip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_id(&mut self, v: ::std::string::String) {
        self.trip_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_id(&mut self) -> &mut ::std::string::String {
        if self.trip_id.is_none() {
            self.trip_id.set_default();
        }
        self.trip_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_id(&mut self) -> ::std::string::String {
        self.trip_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string start_date = 2;


    pub fn get_start_date(&self) -> &str {
        match self.start_date.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_start_date(&mut self) {
        self.start_date.clear();
    }

    pub fn has_start_date(&self) -> bool {
        self.start_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: ::std::string::String) {
        self.start_date = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_date(&mut self) -> &mut ::std::string::String {
        if self.start_date.is_none() {
            self.start_date.set_default();
        }
        self.start_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_date(&mut self) -> ::std::string::String {
        self.start_date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string start_time = 3;


    pub fn get_start_time(&self) -> &str {
        match self.start_time.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::std::string::String) {
        self.start_time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::std::string::String {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::std::string::String {
        self.start_time.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string shape_id = 4;


    pub fn get_shape_id(&self) -> &str {
        match self.shape_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_shape_id(&mut self) {
        self.shape_id.clear();
    }

    pub fn has_shape_id(&self) -> bool {
        self.shape_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shape_id(&mut self, v: ::std::string::String) {
        self.shape_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shape_id(&mut self) -> &mut ::std::string::String {
        if self.shape_id.is_none() {
            self.shape_id.set_default();
        }
        self.shape_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_shape_id(&mut self) -> ::std::string::String {
        self.shape_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TripUpdate_TripProperties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.trip_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_date)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.shape_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.start_date.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.start_time.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.shape_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.start_date.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.shape_id.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_TripProperties {
        TripUpdate_TripProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trip_id",
                |m: &TripUpdate_TripProperties| { &m.trip_id },
                |m: &mut TripUpdate_TripProperties| { &mut m.trip_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_date",
                |m: &TripUpdate_TripProperties| { &m.start_date },
                |m: &mut TripUpdate_TripProperties| { &mut m.start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_time",
                |m: &TripUpdate_TripProperties| { &m.start_time },
                |m: &mut TripUpdate_TripProperties| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shape_id",
                |m: &TripUpdate_TripProperties| { &m.shape_id },
                |m: &mut TripUpdate_TripProperties| { &mut m.shape_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripUpdate_TripProperties>(
                "TripUpdate.TripProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripUpdate_TripProperties {
        static instance: ::protobuf::rt::LazyV2<TripUpdate_TripProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripUpdate_TripProperties::new)
    }
}

impl ::protobuf::Clear for TripUpdate_TripProperties {
    fn clear(&mut self) {
        self.trip_id.clear();
        self.start_date.clear();
        self.start_time.clear();
        self.shape_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_TripProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_TripProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehiclePosition {
    // message fields
    pub trip: ::protobuf::SingularPtrField<TripDescriptor>,
    pub vehicle: ::protobuf::SingularPtrField<VehicleDescriptor>,
    pub position: ::protobuf::SingularPtrField<Position>,
    current_stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    current_status: ::std::option::Option<VehiclePosition_VehicleStopStatus>,
    timestamp: ::std::option::Option<u64>,
    congestion_level: ::std::option::Option<VehiclePosition_CongestionLevel>,
    occupancy_status: ::std::option::Option<VehiclePosition_OccupancyStatus>,
    occupancy_percentage: ::std::option::Option<u32>,
    pub multi_carriage_details: ::protobuf::RepeatedField<VehiclePosition_CarriageDetails>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VehiclePosition {
    fn default() -> &'a VehiclePosition {
        <VehiclePosition as ::protobuf::Message>::default_instance()
    }
}

impl VehiclePosition {
    pub fn new() -> VehiclePosition {
        ::std::default::Default::default()
    }

    // optional .transit_realtime.TripDescriptor trip = 1;


    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| <TripDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 8;


    pub fn get_vehicle(&self) -> &VehicleDescriptor {
        self.vehicle.as_ref().unwrap_or_else(|| <VehicleDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehicleDescriptor) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehicleDescriptor {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehicleDescriptor {
        self.vehicle.take().unwrap_or_else(|| VehicleDescriptor::new())
    }

    // optional .transit_realtime.Position position = 2;


    pub fn get_position(&self) -> &Position {
        self.position.as_ref().unwrap_or_else(|| <Position as ::protobuf::Message>::default_instance())
    }
    pub fn clear_position(&mut self) {
        self.position.clear();
    }

    pub fn has_position(&self) -> bool {
        self.position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: Position) {
        self.position = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position(&mut self) -> &mut Position {
        if self.position.is_none() {
            self.position.set_default();
        }
        self.position.as_mut().unwrap()
    }

    // Take field
    pub fn take_position(&mut self) -> Position {
        self.position.take().unwrap_or_else(|| Position::new())
    }

    // optional uint32 current_stop_sequence = 3;


    pub fn get_current_stop_sequence(&self) -> u32 {
        self.current_stop_sequence.unwrap_or(0)
    }
    pub fn clear_current_stop_sequence(&mut self) {
        self.current_stop_sequence = ::std::option::Option::None;
    }

    pub fn has_current_stop_sequence(&self) -> bool {
        self.current_stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_stop_sequence(&mut self, v: u32) {
        self.current_stop_sequence = ::std::option::Option::Some(v);
    }

    // optional string stop_id = 7;


    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;


    pub fn get_current_status(&self) -> VehiclePosition_VehicleStopStatus {
        self.current_status.unwrap_or(VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO)
    }
    pub fn clear_current_status(&mut self) {
        self.current_status = ::std::option::Option::None;
    }

    pub fn has_current_status(&self) -> bool {
        self.current_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_status(&mut self, v: VehiclePosition_VehicleStopStatus) {
        self.current_status = ::std::option::Option::Some(v);
    }

    // optional uint64 timestamp = 5;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;


    pub fn get_congestion_level(&self) -> VehiclePosition_CongestionLevel {
        self.congestion_level.unwrap_or(VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL)
    }
    pub fn clear_congestion_level(&mut self) {
        self.congestion_level = ::std::option::Option::None;
    }

    pub fn has_congestion_level(&self) -> bool {
        self.congestion_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_congestion_level(&mut self, v: VehiclePosition_CongestionLevel) {
        self.congestion_level = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;


    pub fn get_occupancy_status(&self) -> VehiclePosition_OccupancyStatus {
        self.occupancy_status.unwrap_or(VehiclePosition_OccupancyStatus::EMPTY)
    }
    pub fn clear_occupancy_status(&mut self) {
        self.occupancy_status = ::std::option::Option::None;
    }

    pub fn has_occupancy_status(&self) -> bool {
        self.occupancy_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occupancy_status(&mut self, v: VehiclePosition_OccupancyStatus) {
        self.occupancy_status = ::std::option::Option::Some(v);
    }

    // optional uint32 occupancy_percentage = 10;


    pub fn get_occupancy_percentage(&self) -> u32 {
        self.occupancy_percentage.unwrap_or(0)
    }
    pub fn clear_occupancy_percentage(&mut self) {
        self.occupancy_percentage = ::std::option::Option::None;
    }

    pub fn has_occupancy_percentage(&self) -> bool {
        self.occupancy_percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occupancy_percentage(&mut self, v: u32) {
        self.occupancy_percentage = ::std::option::Option::Some(v);
    }

    // repeated .transit_realtime.VehiclePosition.CarriageDetails multi_carriage_details = 11;


    pub fn get_multi_carriage_details(&self) -> &[VehiclePosition_CarriageDetails] {
        &self.multi_carriage_details
    }
    pub fn clear_multi_carriage_details(&mut self) {
        self.multi_carriage_details.clear();
    }

    // Param is passed by value, moved
    pub fn set_multi_carriage_details(&mut self, v: ::protobuf::RepeatedField<VehiclePosition_CarriageDetails>) {
        self.multi_carriage_details = v;
    }

    // Mutable pointer to the field.
    pub fn mut_multi_carriage_details(&mut self) -> &mut ::protobuf::RepeatedField<VehiclePosition_CarriageDetails> {
        &mut self.multi_carriage_details
    }

    // Take field
    pub fn take_multi_carriage_details(&mut self) -> ::protobuf::RepeatedField<VehiclePosition_CarriageDetails> {
        ::std::mem::replace(&mut self.multi_carriage_details, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for VehiclePosition {
    fn is_initialized(&self) -> bool {
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.position {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.multi_carriage_details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.current_stop_sequence = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.current_status, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.congestion_level, 6, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.occupancy_status, 9, &mut self.unknown_fields)?
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.occupancy_percentage = ::std::option::Option::Some(tmp);
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.multi_carriage_details)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.current_stop_sequence {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.current_status {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.congestion_level {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.occupancy_status {
            my_size += ::protobuf::rt::enum_size(9, v);
        }
        if let Some(v) = self.occupancy_percentage {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.multi_carriage_details {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.position.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.current_stop_sequence {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.current_status {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.congestion_level {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.occupancy_status {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.occupancy_percentage {
            os.write_uint32(10, v)?;
        }
        for v in &self.multi_carriage_details {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehiclePosition {
        VehiclePosition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                "trip",
                |m: &VehiclePosition| { &m.trip },
                |m: &mut VehiclePosition| { &mut m.trip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehicleDescriptor>>(
                "vehicle",
                |m: &VehiclePosition| { &m.vehicle },
                |m: &mut VehiclePosition| { &mut m.vehicle },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Position>>(
                "position",
                |m: &VehiclePosition| { &m.position },
                |m: &mut VehiclePosition| { &mut m.position },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "current_stop_sequence",
                |m: &VehiclePosition| { &m.current_stop_sequence },
                |m: &mut VehiclePosition| { &mut m.current_stop_sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_id",
                |m: &VehiclePosition| { &m.stop_id },
                |m: &mut VehiclePosition| { &mut m.stop_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_VehicleStopStatus>>(
                "current_status",
                |m: &VehiclePosition| { &m.current_status },
                |m: &mut VehiclePosition| { &mut m.current_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &VehiclePosition| { &m.timestamp },
                |m: &mut VehiclePosition| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_CongestionLevel>>(
                "congestion_level",
                |m: &VehiclePosition| { &m.congestion_level },
                |m: &mut VehiclePosition| { &mut m.congestion_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_OccupancyStatus>>(
                "occupancy_status",
                |m: &VehiclePosition| { &m.occupancy_status },
                |m: &mut VehiclePosition| { &mut m.occupancy_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "occupancy_percentage",
                |m: &VehiclePosition| { &m.occupancy_percentage },
                |m: &mut VehiclePosition| { &mut m.occupancy_percentage },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehiclePosition_CarriageDetails>>(
                "multi_carriage_details",
                |m: &VehiclePosition| { &m.multi_carriage_details },
                |m: &mut VehiclePosition| { &mut m.multi_carriage_details },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VehiclePosition>(
                "VehiclePosition",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VehiclePosition {
        static instance: ::protobuf::rt::LazyV2<VehiclePosition> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VehiclePosition::new)
    }
}

impl ::protobuf::Clear for VehiclePosition {
    fn clear(&mut self) {
        self.trip.clear();
        self.vehicle.clear();
        self.position.clear();
        self.current_stop_sequence = ::std::option::Option::None;
        self.stop_id.clear();
        self.current_status = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.congestion_level = ::std::option::Option::None;
        self.occupancy_status = ::std::option::Option::None;
        self.occupancy_percentage = ::std::option::Option::None;
        self.multi_carriage_details.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehiclePosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehiclePosition_CarriageDetails {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    label: ::protobuf::SingularField<::std::string::String>,
    occupancy_status: ::std::option::Option<VehiclePosition_OccupancyStatus>,
    occupancy_percentage: ::std::option::Option<i32>,
    carriage_sequence: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VehiclePosition_CarriageDetails {
    fn default() -> &'a VehiclePosition_CarriageDetails {
        <VehiclePosition_CarriageDetails as ::protobuf::Message>::default_instance()
    }
}

impl VehiclePosition_CarriageDetails {
    pub fn new() -> VehiclePosition_CarriageDetails {
        ::std::default::Default::default()
    }

    // optional string id = 1;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string label = 2;


    pub fn get_label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 3;


    pub fn get_occupancy_status(&self) -> VehiclePosition_OccupancyStatus {
        self.occupancy_status.unwrap_or(VehiclePosition_OccupancyStatus::NO_DATA_AVAILABLE)
    }
    pub fn clear_occupancy_status(&mut self) {
        self.occupancy_status = ::std::option::Option::None;
    }

    pub fn has_occupancy_status(&self) -> bool {
        self.occupancy_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occupancy_status(&mut self, v: VehiclePosition_OccupancyStatus) {
        self.occupancy_status = ::std::option::Option::Some(v);
    }

    // optional int32 occupancy_percentage = 4;


    pub fn get_occupancy_percentage(&self) -> i32 {
        self.occupancy_percentage.unwrap_or(-1i32)
    }
    pub fn clear_occupancy_percentage(&mut self) {
        self.occupancy_percentage = ::std::option::Option::None;
    }

    pub fn has_occupancy_percentage(&self) -> bool {
        self.occupancy_percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occupancy_percentage(&mut self, v: i32) {
        self.occupancy_percentage = ::std::option::Option::Some(v);
    }

    // optional uint32 carriage_sequence = 5;


    pub fn get_carriage_sequence(&self) -> u32 {
        self.carriage_sequence.unwrap_or(0)
    }
    pub fn clear_carriage_sequence(&mut self) {
        self.carriage_sequence = ::std::option::Option::None;
    }

    pub fn has_carriage_sequence(&self) -> bool {
        self.carriage_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_carriage_sequence(&mut self, v: u32) {
        self.carriage_sequence = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for VehiclePosition_CarriageDetails {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.occupancy_status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.occupancy_percentage = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.carriage_sequence = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.occupancy_status {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.occupancy_percentage {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.carriage_sequence {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.label.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.occupancy_status {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.occupancy_percentage {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.carriage_sequence {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehiclePosition_CarriageDetails {
        VehiclePosition_CarriageDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &VehiclePosition_CarriageDetails| { &m.id },
                |m: &mut VehiclePosition_CarriageDetails| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &VehiclePosition_CarriageDetails| { &m.label },
                |m: &mut VehiclePosition_CarriageDetails| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_OccupancyStatus>>(
                "occupancy_status",
                |m: &VehiclePosition_CarriageDetails| { &m.occupancy_status },
                |m: &mut VehiclePosition_CarriageDetails| { &mut m.occupancy_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "occupancy_percentage",
                |m: &VehiclePosition_CarriageDetails| { &m.occupancy_percentage },
                |m: &mut VehiclePosition_CarriageDetails| { &mut m.occupancy_percentage },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "carriage_sequence",
                |m: &VehiclePosition_CarriageDetails| { &m.carriage_sequence },
                |m: &mut VehiclePosition_CarriageDetails| { &mut m.carriage_sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VehiclePosition_CarriageDetails>(
                "VehiclePosition.CarriageDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VehiclePosition_CarriageDetails {
        static instance: ::protobuf::rt::LazyV2<VehiclePosition_CarriageDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VehiclePosition_CarriageDetails::new)
    }
}

impl ::protobuf::Clear for VehiclePosition_CarriageDetails {
    fn clear(&mut self) {
        self.id.clear();
        self.label.clear();
        self.occupancy_status = ::std::option::Option::None;
        self.occupancy_percentage = ::std::option::Option::None;
        self.carriage_sequence = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehiclePosition_CarriageDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_CarriageDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_VehicleStopStatus {
    INCOMING_AT = 0,
    STOPPED_AT = 1,
    IN_TRANSIT_TO = 2,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_VehicleStopStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_VehicleStopStatus> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::INCOMING_AT),
            1 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::STOPPED_AT),
            2 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_VehicleStopStatus] = &[
            VehiclePosition_VehicleStopStatus::INCOMING_AT,
            VehiclePosition_VehicleStopStatus::STOPPED_AT,
            VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<VehiclePosition_VehicleStopStatus>("VehiclePosition.VehicleStopStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for VehiclePosition_VehicleStopStatus {
}

impl ::std::default::Default for VehiclePosition_VehicleStopStatus {
    fn default() -> Self {
        VehiclePosition_VehicleStopStatus::INCOMING_AT
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_VehicleStopStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_CongestionLevel {
    UNKNOWN_CONGESTION_LEVEL = 0,
    RUNNING_SMOOTHLY = 1,
    STOP_AND_GO = 2,
    CONGESTION = 3,
    SEVERE_CONGESTION = 4,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_CongestionLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_CongestionLevel> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL),
            1 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::RUNNING_SMOOTHLY),
            2 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::STOP_AND_GO),
            3 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::CONGESTION),
            4 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::SEVERE_CONGESTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_CongestionLevel] = &[
            VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL,
            VehiclePosition_CongestionLevel::RUNNING_SMOOTHLY,
            VehiclePosition_CongestionLevel::STOP_AND_GO,
            VehiclePosition_CongestionLevel::CONGESTION,
            VehiclePosition_CongestionLevel::SEVERE_CONGESTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<VehiclePosition_CongestionLevel>("VehiclePosition.CongestionLevel", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for VehiclePosition_CongestionLevel {
}

impl ::std::default::Default for VehiclePosition_CongestionLevel {
    fn default() -> Self {
        VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_CongestionLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_OccupancyStatus {
    EMPTY = 0,
    MANY_SEATS_AVAILABLE = 1,
    FEW_SEATS_AVAILABLE = 2,
    STANDING_ROOM_ONLY = 3,
    CRUSHED_STANDING_ROOM_ONLY = 4,
    FULL = 5,
    NOT_ACCEPTING_PASSENGERS = 6,
    NO_DATA_AVAILABLE = 7,
    NOT_BOARDABLE = 8,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_OccupancyStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_OccupancyStatus> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::EMPTY),
            1 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::MANY_SEATS_AVAILABLE),
            2 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::FEW_SEATS_AVAILABLE),
            3 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::STANDING_ROOM_ONLY),
            4 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY),
            5 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::FULL),
            6 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::NOT_ACCEPTING_PASSENGERS),
            7 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::NO_DATA_AVAILABLE),
            8 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::NOT_BOARDABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_OccupancyStatus] = &[
            VehiclePosition_OccupancyStatus::EMPTY,
            VehiclePosition_OccupancyStatus::MANY_SEATS_AVAILABLE,
            VehiclePosition_OccupancyStatus::FEW_SEATS_AVAILABLE,
            VehiclePosition_OccupancyStatus::STANDING_ROOM_ONLY,
            VehiclePosition_OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY,
            VehiclePosition_OccupancyStatus::FULL,
            VehiclePosition_OccupancyStatus::NOT_ACCEPTING_PASSENGERS,
            VehiclePosition_OccupancyStatus::NO_DATA_AVAILABLE,
            VehiclePosition_OccupancyStatus::NOT_BOARDABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<VehiclePosition_OccupancyStatus>("VehiclePosition.OccupancyStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for VehiclePosition_OccupancyStatus {
}

impl ::std::default::Default for VehiclePosition_OccupancyStatus {
    fn default() -> Self {
        VehiclePosition_OccupancyStatus::EMPTY
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_OccupancyStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Alert {
    // message fields
    pub active_period: ::protobuf::RepeatedField<TimeRange>,
    pub informed_entity: ::protobuf::RepeatedField<EntitySelector>,
    cause: ::std::option::Option<Alert_Cause>,
    effect: ::std::option::Option<Alert_Effect>,
    pub url: ::protobuf::SingularPtrField<TranslatedString>,
    pub header_text: ::protobuf::SingularPtrField<TranslatedString>,
    pub description_text: ::protobuf::SingularPtrField<TranslatedString>,
    pub tts_header_text: ::protobuf::SingularPtrField<TranslatedString>,
    pub tts_description_text: ::protobuf::SingularPtrField<TranslatedString>,
    severity_level: ::std::option::Option<Alert_SeverityLevel>,
    pub image: ::protobuf::SingularPtrField<TranslatedImage>,
    pub image_alternative_text: ::protobuf::SingularPtrField<TranslatedString>,
    pub cause_detail: ::protobuf::SingularPtrField<TranslatedString>,
    pub effect_detail: ::protobuf::SingularPtrField<TranslatedString>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Alert {
    fn default() -> &'a Alert {
        <Alert as ::protobuf::Message>::default_instance()
    }
}

impl Alert {
    pub fn new() -> Alert {
        ::std::default::Default::default()
    }

    // repeated .transit_realtime.TimeRange active_period = 1;


    pub fn get_active_period(&self) -> &[TimeRange] {
        &self.active_period
    }
    pub fn clear_active_period(&mut self) {
        self.active_period.clear();
    }

    // Param is passed by value, moved
    pub fn set_active_period(&mut self, v: ::protobuf::RepeatedField<TimeRange>) {
        self.active_period = v;
    }

    // Mutable pointer to the field.
    pub fn mut_active_period(&mut self) -> &mut ::protobuf::RepeatedField<TimeRange> {
        &mut self.active_period
    }

    // Take field
    pub fn take_active_period(&mut self) -> ::protobuf::RepeatedField<TimeRange> {
        ::std::mem::replace(&mut self.active_period, ::protobuf::RepeatedField::new())
    }

    // repeated .transit_realtime.EntitySelector informed_entity = 5;


    pub fn get_informed_entity(&self) -> &[EntitySelector] {
        &self.informed_entity
    }
    pub fn clear_informed_entity(&mut self) {
        self.informed_entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_informed_entity(&mut self, v: ::protobuf::RepeatedField<EntitySelector>) {
        self.informed_entity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_informed_entity(&mut self) -> &mut ::protobuf::RepeatedField<EntitySelector> {
        &mut self.informed_entity
    }

    // Take field
    pub fn take_informed_entity(&mut self) -> ::protobuf::RepeatedField<EntitySelector> {
        ::std::mem::replace(&mut self.informed_entity, ::protobuf::RepeatedField::new())
    }

    // optional .transit_realtime.Alert.Cause cause = 6;


    pub fn get_cause(&self) -> Alert_Cause {
        self.cause.unwrap_or(Alert_Cause::UNKNOWN_CAUSE)
    }
    pub fn clear_cause(&mut self) {
        self.cause = ::std::option::Option::None;
    }

    pub fn has_cause(&self) -> bool {
        self.cause.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cause(&mut self, v: Alert_Cause) {
        self.cause = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.Alert.Effect effect = 7;


    pub fn get_effect(&self) -> Alert_Effect {
        self.effect.unwrap_or(Alert_Effect::UNKNOWN_EFFECT)
    }
    pub fn clear_effect(&mut self) {
        self.effect = ::std::option::Option::None;
    }

    pub fn has_effect(&self) -> bool {
        self.effect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effect(&mut self, v: Alert_Effect) {
        self.effect = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TranslatedString url = 8;


    pub fn get_url(&self) -> &TranslatedString {
        self.url.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: TranslatedString) {
        self.url = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut TranslatedString {
        if self.url.is_none() {
            self.url.set_default();
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> TranslatedString {
        self.url.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString header_text = 10;


    pub fn get_header_text(&self) -> &TranslatedString {
        self.header_text.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header_text(&mut self) {
        self.header_text.clear();
    }

    pub fn has_header_text(&self) -> bool {
        self.header_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_text(&mut self, v: TranslatedString) {
        self.header_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_text(&mut self) -> &mut TranslatedString {
        if self.header_text.is_none() {
            self.header_text.set_default();
        }
        self.header_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_text(&mut self) -> TranslatedString {
        self.header_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString description_text = 11;


    pub fn get_description_text(&self) -> &TranslatedString {
        self.description_text.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_description_text(&mut self) {
        self.description_text.clear();
    }

    pub fn has_description_text(&self) -> bool {
        self.description_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description_text(&mut self, v: TranslatedString) {
        self.description_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description_text(&mut self) -> &mut TranslatedString {
        if self.description_text.is_none() {
            self.description_text.set_default();
        }
        self.description_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_description_text(&mut self) -> TranslatedString {
        self.description_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString tts_header_text = 12;


    pub fn get_tts_header_text(&self) -> &TranslatedString {
        self.tts_header_text.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tts_header_text(&mut self) {
        self.tts_header_text.clear();
    }

    pub fn has_tts_header_text(&self) -> bool {
        self.tts_header_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tts_header_text(&mut self, v: TranslatedString) {
        self.tts_header_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tts_header_text(&mut self) -> &mut TranslatedString {
        if self.tts_header_text.is_none() {
            self.tts_header_text.set_default();
        }
        self.tts_header_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_tts_header_text(&mut self) -> TranslatedString {
        self.tts_header_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString tts_description_text = 13;


    pub fn get_tts_description_text(&self) -> &TranslatedString {
        self.tts_description_text.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tts_description_text(&mut self) {
        self.tts_description_text.clear();
    }

    pub fn has_tts_description_text(&self) -> bool {
        self.tts_description_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tts_description_text(&mut self, v: TranslatedString) {
        self.tts_description_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tts_description_text(&mut self) -> &mut TranslatedString {
        if self.tts_description_text.is_none() {
            self.tts_description_text.set_default();
        }
        self.tts_description_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_tts_description_text(&mut self) -> TranslatedString {
        self.tts_description_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.Alert.SeverityLevel severity_level = 14;


    pub fn get_severity_level(&self) -> Alert_SeverityLevel {
        self.severity_level.unwrap_or(Alert_SeverityLevel::UNKNOWN_SEVERITY)
    }
    pub fn clear_severity_level(&mut self) {
        self.severity_level = ::std::option::Option::None;
    }

    pub fn has_severity_level(&self) -> bool {
        self.severity_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_severity_level(&mut self, v: Alert_SeverityLevel) {
        self.severity_level = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TranslatedImage image = 15;


    pub fn get_image(&self) -> &TranslatedImage {
        self.image.as_ref().unwrap_or_else(|| <TranslatedImage as ::protobuf::Message>::default_instance())
    }
    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    pub fn has_image(&self) -> bool {
        self.image.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: TranslatedImage) {
        self.image = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut TranslatedImage {
        if self.image.is_none() {
            self.image.set_default();
        }
        self.image.as_mut().unwrap()
    }

    // Take field
    pub fn take_image(&mut self) -> TranslatedImage {
        self.image.take().unwrap_or_else(|| TranslatedImage::new())
    }

    // optional .transit_realtime.TranslatedString image_alternative_text = 16;


    pub fn get_image_alternative_text(&self) -> &TranslatedString {
        self.image_alternative_text.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_image_alternative_text(&mut self) {
        self.image_alternative_text.clear();
    }

    pub fn has_image_alternative_text(&self) -> bool {
        self.image_alternative_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_alternative_text(&mut self, v: TranslatedString) {
        self.image_alternative_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_alternative_text(&mut self) -> &mut TranslatedString {
        if self.image_alternative_text.is_none() {
            self.image_alternative_text.set_default();
        }
        self.image_alternative_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_image_alternative_text(&mut self) -> TranslatedString {
        self.image_alternative_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString cause_detail = 17;


    pub fn get_cause_detail(&self) -> &TranslatedString {
        self.cause_detail.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cause_detail(&mut self) {
        self.cause_detail.clear();
    }

    pub fn has_cause_detail(&self) -> bool {
        self.cause_detail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cause_detail(&mut self, v: TranslatedString) {
        self.cause_detail = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cause_detail(&mut self) -> &mut TranslatedString {
        if self.cause_detail.is_none() {
            self.cause_detail.set_default();
        }
        self.cause_detail.as_mut().unwrap()
    }

    // Take field
    pub fn take_cause_detail(&mut self) -> TranslatedString {
        self.cause_detail.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString effect_detail = 18;


    pub fn get_effect_detail(&self) -> &TranslatedString {
        self.effect_detail.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_effect_detail(&mut self) {
        self.effect_detail.clear();
    }

    pub fn has_effect_detail(&self) -> bool {
        self.effect_detail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effect_detail(&mut self, v: TranslatedString) {
        self.effect_detail = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_effect_detail(&mut self) -> &mut TranslatedString {
        if self.effect_detail.is_none() {
            self.effect_detail.set_default();
        }
        self.effect_detail.as_mut().unwrap()
    }

    // Take field
    pub fn take_effect_detail(&mut self) -> TranslatedString {
        self.effect_detail.take().unwrap_or_else(|| TranslatedString::new())
    }
}

impl ::protobuf::Message for Alert {
    fn is_initialized(&self) -> bool {
        for v in &self.active_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.informed_entity {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.url {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.header_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.description_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tts_header_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tts_description_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.image {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.image_alternative_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cause_detail {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.effect_detail {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.active_period)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.informed_entity)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.cause, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.effect, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.url)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header_text)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.description_text)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tts_header_text)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tts_description_text)?;
                },
                14 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.severity_level, 14, &mut self.unknown_fields)?
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.image)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.image_alternative_text)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cause_detail)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.effect_detail)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.active_period {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.informed_entity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.cause {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.effect {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(ref v) = self.url.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.header_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.description_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tts_header_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tts_description_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.severity_level {
            my_size += ::protobuf::rt::enum_size(14, v);
        }
        if let Some(ref v) = self.image.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.image_alternative_text.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cause_detail.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.effect_detail.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.active_period {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.informed_entity {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.cause {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.effect {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.url.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.header_text.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.description_text.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tts_header_text.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tts_description_text.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.severity_level {
            os.write_enum(14, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.image.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.image_alternative_text.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cause_detail.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.effect_detail.as_ref() {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Alert {
        Alert::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TimeRange>>(
                "active_period",
                |m: &Alert| { &m.active_period },
                |m: &mut Alert| { &mut m.active_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntitySelector>>(
                "informed_entity",
                |m: &Alert| { &m.informed_entity },
                |m: &mut Alert| { &mut m.informed_entity },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_Cause>>(
                "cause",
                |m: &Alert| { &m.cause },
                |m: &mut Alert| { &mut m.cause },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_Effect>>(
                "effect",
                |m: &Alert| { &m.effect },
                |m: &mut Alert| { &mut m.effect },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "url",
                |m: &Alert| { &m.url },
                |m: &mut Alert| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "header_text",
                |m: &Alert| { &m.header_text },
                |m: &mut Alert| { &mut m.header_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "description_text",
                |m: &Alert| { &m.description_text },
                |m: &mut Alert| { &mut m.description_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "tts_header_text",
                |m: &Alert| { &m.tts_header_text },
                |m: &mut Alert| { &mut m.tts_header_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "tts_description_text",
                |m: &Alert| { &m.tts_description_text },
                |m: &mut Alert| { &mut m.tts_description_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_SeverityLevel>>(
                "severity_level",
                |m: &Alert| { &m.severity_level },
                |m: &mut Alert| { &mut m.severity_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedImage>>(
                "image",
                |m: &Alert| { &m.image },
                |m: &mut Alert| { &mut m.image },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "image_alternative_text",
                |m: &Alert| { &m.image_alternative_text },
                |m: &mut Alert| { &mut m.image_alternative_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "cause_detail",
                |m: &Alert| { &m.cause_detail },
                |m: &mut Alert| { &mut m.cause_detail },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "effect_detail",
                |m: &Alert| { &m.effect_detail },
                |m: &mut Alert| { &mut m.effect_detail },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Alert>(
                "Alert",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Alert {
        static instance: ::protobuf::rt::LazyV2<Alert> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Alert::new)
    }
}

impl ::protobuf::Clear for Alert {
    fn clear(&mut self) {
        self.active_period.clear();
        self.informed_entity.clear();
        self.cause = ::std::option::Option::None;
        self.effect = ::std::option::Option::None;
        self.url.clear();
        self.header_text.clear();
        self.description_text.clear();
        self.tts_header_text.clear();
        self.tts_description_text.clear();
        self.severity_level = ::std::option::Option::None;
        self.image.clear();
        self.image_alternative_text.clear();
        self.cause_detail.clear();
        self.effect_detail.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Alert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Alert {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_Cause {
    UNKNOWN_CAUSE = 1,
    OTHER_CAUSE = 2,
    TECHNICAL_PROBLEM = 3,
    STRIKE = 4,
    DEMONSTRATION = 5,
    ACCIDENT = 6,
    HOLIDAY = 7,
    WEATHER = 8,
    MAINTENANCE = 9,
    CONSTRUCTION = 10,
    POLICE_ACTIVITY = 11,
    MEDICAL_EMERGENCY = 12,
}

impl ::protobuf::ProtobufEnum for Alert_Cause {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_Cause> {
        match value {
            1 => ::std::option::Option::Some(Alert_Cause::UNKNOWN_CAUSE),
            2 => ::std::option::Option::Some(Alert_Cause::OTHER_CAUSE),
            3 => ::std::option::Option::Some(Alert_Cause::TECHNICAL_PROBLEM),
            4 => ::std::option::Option::Some(Alert_Cause::STRIKE),
            5 => ::std::option::Option::Some(Alert_Cause::DEMONSTRATION),
            6 => ::std::option::Option::Some(Alert_Cause::ACCIDENT),
            7 => ::std::option::Option::Some(Alert_Cause::HOLIDAY),
            8 => ::std::option::Option::Some(Alert_Cause::WEATHER),
            9 => ::std::option::Option::Some(Alert_Cause::MAINTENANCE),
            10 => ::std::option::Option::Some(Alert_Cause::CONSTRUCTION),
            11 => ::std::option::Option::Some(Alert_Cause::POLICE_ACTIVITY),
            12 => ::std::option::Option::Some(Alert_Cause::MEDICAL_EMERGENCY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_Cause] = &[
            Alert_Cause::UNKNOWN_CAUSE,
            Alert_Cause::OTHER_CAUSE,
            Alert_Cause::TECHNICAL_PROBLEM,
            Alert_Cause::STRIKE,
            Alert_Cause::DEMONSTRATION,
            Alert_Cause::ACCIDENT,
            Alert_Cause::HOLIDAY,
            Alert_Cause::WEATHER,
            Alert_Cause::MAINTENANCE,
            Alert_Cause::CONSTRUCTION,
            Alert_Cause::POLICE_ACTIVITY,
            Alert_Cause::MEDICAL_EMERGENCY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Alert_Cause>("Alert.Cause", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Alert_Cause {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for Alert_Cause {
    fn default() -> Self {
        Alert_Cause::UNKNOWN_CAUSE
    }
}

impl ::protobuf::reflect::ProtobufValue for Alert_Cause {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_Effect {
    NO_SERVICE = 1,
    REDUCED_SERVICE = 2,
    SIGNIFICANT_DELAYS = 3,
    DETOUR = 4,
    ADDITIONAL_SERVICE = 5,
    MODIFIED_SERVICE = 6,
    OTHER_EFFECT = 7,
    UNKNOWN_EFFECT = 8,
    STOP_MOVED = 9,
    NO_EFFECT = 10,
    ACCESSIBILITY_ISSUE = 11,
}

impl ::protobuf::ProtobufEnum for Alert_Effect {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_Effect> {
        match value {
            1 => ::std::option::Option::Some(Alert_Effect::NO_SERVICE),
            2 => ::std::option::Option::Some(Alert_Effect::REDUCED_SERVICE),
            3 => ::std::option::Option::Some(Alert_Effect::SIGNIFICANT_DELAYS),
            4 => ::std::option::Option::Some(Alert_Effect::DETOUR),
            5 => ::std::option::Option::Some(Alert_Effect::ADDITIONAL_SERVICE),
            6 => ::std::option::Option::Some(Alert_Effect::MODIFIED_SERVICE),
            7 => ::std::option::Option::Some(Alert_Effect::OTHER_EFFECT),
            8 => ::std::option::Option::Some(Alert_Effect::UNKNOWN_EFFECT),
            9 => ::std::option::Option::Some(Alert_Effect::STOP_MOVED),
            10 => ::std::option::Option::Some(Alert_Effect::NO_EFFECT),
            11 => ::std::option::Option::Some(Alert_Effect::ACCESSIBILITY_ISSUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_Effect] = &[
            Alert_Effect::NO_SERVICE,
            Alert_Effect::REDUCED_SERVICE,
            Alert_Effect::SIGNIFICANT_DELAYS,
            Alert_Effect::DETOUR,
            Alert_Effect::ADDITIONAL_SERVICE,
            Alert_Effect::MODIFIED_SERVICE,
            Alert_Effect::OTHER_EFFECT,
            Alert_Effect::UNKNOWN_EFFECT,
            Alert_Effect::STOP_MOVED,
            Alert_Effect::NO_EFFECT,
            Alert_Effect::ACCESSIBILITY_ISSUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Alert_Effect>("Alert.Effect", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Alert_Effect {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for Alert_Effect {
    fn default() -> Self {
        Alert_Effect::NO_SERVICE
    }
}

impl ::protobuf::reflect::ProtobufValue for Alert_Effect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_SeverityLevel {
    UNKNOWN_SEVERITY = 1,
    INFO = 2,
    WARNING = 3,
    SEVERE = 4,
}

impl ::protobuf::ProtobufEnum for Alert_SeverityLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_SeverityLevel> {
        match value {
            1 => ::std::option::Option::Some(Alert_SeverityLevel::UNKNOWN_SEVERITY),
            2 => ::std::option::Option::Some(Alert_SeverityLevel::INFO),
            3 => ::std::option::Option::Some(Alert_SeverityLevel::WARNING),
            4 => ::std::option::Option::Some(Alert_SeverityLevel::SEVERE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_SeverityLevel] = &[
            Alert_SeverityLevel::UNKNOWN_SEVERITY,
            Alert_SeverityLevel::INFO,
            Alert_SeverityLevel::WARNING,
            Alert_SeverityLevel::SEVERE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Alert_SeverityLevel>("Alert.SeverityLevel", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Alert_SeverityLevel {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for Alert_SeverityLevel {
    fn default() -> Self {
        Alert_SeverityLevel::UNKNOWN_SEVERITY
    }
}

impl ::protobuf::reflect::ProtobufValue for Alert_SeverityLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeRange {
    // message fields
    start: ::std::option::Option<u64>,
    end: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeRange {
    fn default() -> &'a TimeRange {
        <TimeRange as ::protobuf::Message>::default_instance()
    }
}

impl TimeRange {
    pub fn new() -> TimeRange {
        ::std::default::Default::default()
    }

    // optional uint64 start = 1;


    pub fn get_start(&self) -> u64 {
        self.start.unwrap_or(0)
    }
    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    // optional uint64 end = 2;


    pub fn get_end(&self) -> u64 {
        self.end.unwrap_or(0)
    }
    pub fn clear_end(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: u64) {
        self.end = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TimeRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.end {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.start {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.end {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeRange {
        TimeRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "start",
                |m: &TimeRange| { &m.start },
                |m: &mut TimeRange| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "end",
                |m: &TimeRange| { &m.end },
                |m: &mut TimeRange| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeRange>(
                "TimeRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimeRange {
        static instance: ::protobuf::rt::LazyV2<TimeRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimeRange::new)
    }
}

impl ::protobuf::Clear for TimeRange {
    fn clear(&mut self) {
        self.start = ::std::option::Option::None;
        self.end = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Position {
    // message fields
    latitude: ::std::option::Option<f32>,
    longitude: ::std::option::Option<f32>,
    bearing: ::std::option::Option<f32>,
    odometer: ::std::option::Option<f64>,
    speed: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Position {
    fn default() -> &'a Position {
        <Position as ::protobuf::Message>::default_instance()
    }
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    // required float latitude = 1;


    pub fn get_latitude(&self) -> f32 {
        self.latitude.unwrap_or(0.)
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f32) {
        self.latitude = ::std::option::Option::Some(v);
    }

    // required float longitude = 2;


    pub fn get_longitude(&self) -> f32 {
        self.longitude.unwrap_or(0.)
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f32) {
        self.longitude = ::std::option::Option::Some(v);
    }

    // optional float bearing = 3;


    pub fn get_bearing(&self) -> f32 {
        self.bearing.unwrap_or(0.)
    }
    pub fn clear_bearing(&mut self) {
        self.bearing = ::std::option::Option::None;
    }

    pub fn has_bearing(&self) -> bool {
        self.bearing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bearing(&mut self, v: f32) {
        self.bearing = ::std::option::Option::Some(v);
    }

    // optional double odometer = 4;


    pub fn get_odometer(&self) -> f64 {
        self.odometer.unwrap_or(0.)
    }
    pub fn clear_odometer(&mut self) {
        self.odometer = ::std::option::Option::None;
    }

    pub fn has_odometer(&self) -> bool {
        self.odometer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_odometer(&mut self, v: f64) {
        self.odometer = ::std::option::Option::Some(v);
    }

    // optional float speed = 5;


    pub fn get_speed(&self) -> f32 {
        self.speed.unwrap_or(0.)
    }
    pub fn clear_speed(&mut self) {
        self.speed = ::std::option::Option::None;
    }

    pub fn has_speed(&self) -> bool {
        self.speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Position {
    fn is_initialized(&self) -> bool {
        if self.latitude.is_none() {
            return false;
        }
        if self.longitude.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.latitude = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.longitude = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.bearing = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.odometer = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.latitude {
            my_size += 5;
        }
        if let Some(v) = self.longitude {
            my_size += 5;
        }
        if let Some(v) = self.bearing {
            my_size += 5;
        }
        if let Some(v) = self.odometer {
            my_size += 9;
        }
        if let Some(v) = self.speed {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.latitude {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.bearing {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.odometer {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.speed {
            os.write_float(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Position {
        Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "latitude",
                |m: &Position| { &m.latitude },
                |m: &mut Position| { &mut m.latitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "longitude",
                |m: &Position| { &m.longitude },
                |m: &mut Position| { &mut m.longitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "bearing",
                |m: &Position| { &m.bearing },
                |m: &mut Position| { &mut m.bearing },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "odometer",
                |m: &Position| { &m.odometer },
                |m: &mut Position| { &mut m.odometer },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "speed",
                |m: &Position| { &m.speed },
                |m: &mut Position| { &mut m.speed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Position>(
                "Position",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Position {
        static instance: ::protobuf::rt::LazyV2<Position> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Position::new)
    }
}

impl ::protobuf::Clear for Position {
    fn clear(&mut self) {
        self.latitude = ::std::option::Option::None;
        self.longitude = ::std::option::Option::None;
        self.bearing = ::std::option::Option::None;
        self.odometer = ::std::option::Option::None;
        self.speed = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripDescriptor {
    // message fields
    trip_id: ::protobuf::SingularField<::std::string::String>,
    route_id: ::protobuf::SingularField<::std::string::String>,
    direction_id: ::std::option::Option<u32>,
    start_time: ::protobuf::SingularField<::std::string::String>,
    start_date: ::protobuf::SingularField<::std::string::String>,
    schedule_relationship: ::std::option::Option<TripDescriptor_ScheduleRelationship>,
    pub modified_trip: ::protobuf::SingularPtrField<TripDescriptor_ModifiedTripSelector>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripDescriptor {
    fn default() -> &'a TripDescriptor {
        <TripDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl TripDescriptor {
    pub fn new() -> TripDescriptor {
        ::std::default::Default::default()
    }

    // optional string trip_id = 1;


    pub fn get_trip_id(&self) -> &str {
        match self.trip_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_trip_id(&mut self) {
        self.trip_id.clear();
    }

    pub fn has_trip_id(&self) -> bool {
        self.trip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_id(&mut self, v: ::std::string::String) {
        self.trip_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_id(&mut self) -> &mut ::std::string::String {
        if self.trip_id.is_none() {
            self.trip_id.set_default();
        }
        self.trip_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_id(&mut self) -> ::std::string::String {
        self.trip_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string route_id = 5;


    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 direction_id = 6;


    pub fn get_direction_id(&self) -> u32 {
        self.direction_id.unwrap_or(0)
    }
    pub fn clear_direction_id(&mut self) {
        self.direction_id = ::std::option::Option::None;
    }

    pub fn has_direction_id(&self) -> bool {
        self.direction_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction_id(&mut self, v: u32) {
        self.direction_id = ::std::option::Option::Some(v);
    }

    // optional string start_time = 2;


    pub fn get_start_time(&self) -> &str {
        match self.start_time.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::std::string::String) {
        self.start_time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::std::string::String {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::std::string::String {
        self.start_time.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string start_date = 3;


    pub fn get_start_date(&self) -> &str {
        match self.start_date.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_start_date(&mut self) {
        self.start_date.clear();
    }

    pub fn has_start_date(&self) -> bool {
        self.start_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: ::std::string::String) {
        self.start_date = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_date(&mut self) -> &mut ::std::string::String {
        if self.start_date.is_none() {
            self.start_date.set_default();
        }
        self.start_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_date(&mut self) -> ::std::string::String {
        self.start_date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;


    pub fn get_schedule_relationship(&self) -> TripDescriptor_ScheduleRelationship {
        self.schedule_relationship.unwrap_or(TripDescriptor_ScheduleRelationship::SCHEDULED)
    }
    pub fn clear_schedule_relationship(&mut self) {
        self.schedule_relationship = ::std::option::Option::None;
    }

    pub fn has_schedule_relationship(&self) -> bool {
        self.schedule_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_relationship(&mut self, v: TripDescriptor_ScheduleRelationship) {
        self.schedule_relationship = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TripDescriptor.ModifiedTripSelector modified_trip = 7;


    pub fn get_modified_trip(&self) -> &TripDescriptor_ModifiedTripSelector {
        self.modified_trip.as_ref().unwrap_or_else(|| <TripDescriptor_ModifiedTripSelector as ::protobuf::Message>::default_instance())
    }
    pub fn clear_modified_trip(&mut self) {
        self.modified_trip.clear();
    }

    pub fn has_modified_trip(&self) -> bool {
        self.modified_trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modified_trip(&mut self, v: TripDescriptor_ModifiedTripSelector) {
        self.modified_trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modified_trip(&mut self) -> &mut TripDescriptor_ModifiedTripSelector {
        if self.modified_trip.is_none() {
            self.modified_trip.set_default();
        }
        self.modified_trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_modified_trip(&mut self) -> TripDescriptor_ModifiedTripSelector {
        self.modified_trip.take().unwrap_or_else(|| TripDescriptor_ModifiedTripSelector::new())
    }
}

impl ::protobuf::Message for TripDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.modified_trip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.trip_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.direction_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_date)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.schedule_relationship, 4, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.modified_trip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.direction_id {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.start_time.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.start_date.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.schedule_relationship {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(ref v) = self.modified_trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.direction_id {
            os.write_uint32(6, v)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.start_date.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.schedule_relationship {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.modified_trip.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripDescriptor {
        TripDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trip_id",
                |m: &TripDescriptor| { &m.trip_id },
                |m: &mut TripDescriptor| { &mut m.trip_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "route_id",
                |m: &TripDescriptor| { &m.route_id },
                |m: &mut TripDescriptor| { &mut m.route_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "direction_id",
                |m: &TripDescriptor| { &m.direction_id },
                |m: &mut TripDescriptor| { &mut m.direction_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_time",
                |m: &TripDescriptor| { &m.start_time },
                |m: &mut TripDescriptor| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_date",
                |m: &TripDescriptor| { &m.start_date },
                |m: &mut TripDescriptor| { &mut m.start_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TripDescriptor_ScheduleRelationship>>(
                "schedule_relationship",
                |m: &TripDescriptor| { &m.schedule_relationship },
                |m: &mut TripDescriptor| { &mut m.schedule_relationship },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor_ModifiedTripSelector>>(
                "modified_trip",
                |m: &TripDescriptor| { &m.modified_trip },
                |m: &mut TripDescriptor| { &mut m.modified_trip },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripDescriptor>(
                "TripDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripDescriptor {
        static instance: ::protobuf::rt::LazyV2<TripDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripDescriptor::new)
    }
}

impl ::protobuf::Clear for TripDescriptor {
    fn clear(&mut self) {
        self.trip_id.clear();
        self.route_id.clear();
        self.direction_id = ::std::option::Option::None;
        self.start_time.clear();
        self.start_date.clear();
        self.schedule_relationship = ::std::option::Option::None;
        self.modified_trip.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripDescriptor_ModifiedTripSelector {
    // message fields
    modifications_id: ::protobuf::SingularField<::std::string::String>,
    affected_trip_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripDescriptor_ModifiedTripSelector {
    fn default() -> &'a TripDescriptor_ModifiedTripSelector {
        <TripDescriptor_ModifiedTripSelector as ::protobuf::Message>::default_instance()
    }
}

impl TripDescriptor_ModifiedTripSelector {
    pub fn new() -> TripDescriptor_ModifiedTripSelector {
        ::std::default::Default::default()
    }

    // optional string modifications_id = 1;


    pub fn get_modifications_id(&self) -> &str {
        match self.modifications_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_modifications_id(&mut self) {
        self.modifications_id.clear();
    }

    pub fn has_modifications_id(&self) -> bool {
        self.modifications_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modifications_id(&mut self, v: ::std::string::String) {
        self.modifications_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modifications_id(&mut self) -> &mut ::std::string::String {
        if self.modifications_id.is_none() {
            self.modifications_id.set_default();
        }
        self.modifications_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_modifications_id(&mut self) -> ::std::string::String {
        self.modifications_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string affected_trip_id = 2;


    pub fn get_affected_trip_id(&self) -> &str {
        match self.affected_trip_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_affected_trip_id(&mut self) {
        self.affected_trip_id.clear();
    }

    pub fn has_affected_trip_id(&self) -> bool {
        self.affected_trip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_affected_trip_id(&mut self, v: ::std::string::String) {
        self.affected_trip_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_affected_trip_id(&mut self) -> &mut ::std::string::String {
        if self.affected_trip_id.is_none() {
            self.affected_trip_id.set_default();
        }
        self.affected_trip_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_affected_trip_id(&mut self) -> ::std::string::String {
        self.affected_trip_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TripDescriptor_ModifiedTripSelector {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.modifications_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.affected_trip_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.modifications_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.affected_trip_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.modifications_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.affected_trip_id.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripDescriptor_ModifiedTripSelector {
        TripDescriptor_ModifiedTripSelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "modifications_id",
                |m: &TripDescriptor_ModifiedTripSelector| { &m.modifications_id },
                |m: &mut TripDescriptor_ModifiedTripSelector| { &mut m.modifications_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "affected_trip_id",
                |m: &TripDescriptor_ModifiedTripSelector| { &m.affected_trip_id },
                |m: &mut TripDescriptor_ModifiedTripSelector| { &mut m.affected_trip_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripDescriptor_ModifiedTripSelector>(
                "TripDescriptor.ModifiedTripSelector",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripDescriptor_ModifiedTripSelector {
        static instance: ::protobuf::rt::LazyV2<TripDescriptor_ModifiedTripSelector> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripDescriptor_ModifiedTripSelector::new)
    }
}

impl ::protobuf::Clear for TripDescriptor_ModifiedTripSelector {
    fn clear(&mut self) {
        self.modifications_id.clear();
        self.affected_trip_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripDescriptor_ModifiedTripSelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor_ModifiedTripSelector {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TripDescriptor_ScheduleRelationship {
    SCHEDULED = 0,
    ADDED = 1,
    UNSCHEDULED = 2,
    CANCELED = 3,
    REPLACEMENT = 5,
    DUPLICATED = 6,
    DELETED = 7,
}

impl ::protobuf::ProtobufEnum for TripDescriptor_ScheduleRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TripDescriptor_ScheduleRelationship> {
        match value {
            0 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::SCHEDULED),
            1 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::ADDED),
            2 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::UNSCHEDULED),
            3 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::CANCELED),
            5 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::REPLACEMENT),
            6 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::DUPLICATED),
            7 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::DELETED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TripDescriptor_ScheduleRelationship] = &[
            TripDescriptor_ScheduleRelationship::SCHEDULED,
            TripDescriptor_ScheduleRelationship::ADDED,
            TripDescriptor_ScheduleRelationship::UNSCHEDULED,
            TripDescriptor_ScheduleRelationship::CANCELED,
            TripDescriptor_ScheduleRelationship::REPLACEMENT,
            TripDescriptor_ScheduleRelationship::DUPLICATED,
            TripDescriptor_ScheduleRelationship::DELETED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TripDescriptor_ScheduleRelationship>("TripDescriptor.ScheduleRelationship", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TripDescriptor_ScheduleRelationship {
}

impl ::std::default::Default for TripDescriptor_ScheduleRelationship {
    fn default() -> Self {
        TripDescriptor_ScheduleRelationship::SCHEDULED
    }
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor_ScheduleRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehicleDescriptor {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    label: ::protobuf::SingularField<::std::string::String>,
    license_plate: ::protobuf::SingularField<::std::string::String>,
    wheelchair_accessible: ::std::option::Option<VehicleDescriptor_WheelchairAccessible>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VehicleDescriptor {
    fn default() -> &'a VehicleDescriptor {
        <VehicleDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl VehicleDescriptor {
    pub fn new() -> VehicleDescriptor {
        ::std::default::Default::default()
    }

    // optional string id = 1;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string label = 2;


    pub fn get_label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string license_plate = 3;


    pub fn get_license_plate(&self) -> &str {
        match self.license_plate.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_license_plate(&mut self) {
        self.license_plate.clear();
    }

    pub fn has_license_plate(&self) -> bool {
        self.license_plate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_license_plate(&mut self, v: ::std::string::String) {
        self.license_plate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_license_plate(&mut self) -> &mut ::std::string::String {
        if self.license_plate.is_none() {
            self.license_plate.set_default();
        }
        self.license_plate.as_mut().unwrap()
    }

    // Take field
    pub fn take_license_plate(&mut self) -> ::std::string::String {
        self.license_plate.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.VehicleDescriptor.WheelchairAccessible wheelchair_accessible = 4;


    pub fn get_wheelchair_accessible(&self) -> VehicleDescriptor_WheelchairAccessible {
        self.wheelchair_accessible.unwrap_or(VehicleDescriptor_WheelchairAccessible::NO_VALUE)
    }
    pub fn clear_wheelchair_accessible(&mut self) {
        self.wheelchair_accessible = ::std::option::Option::None;
    }

    pub fn has_wheelchair_accessible(&self) -> bool {
        self.wheelchair_accessible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheelchair_accessible(&mut self, v: VehicleDescriptor_WheelchairAccessible) {
        self.wheelchair_accessible = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for VehicleDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.license_plate)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.wheelchair_accessible, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.license_plate.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.wheelchair_accessible {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.label.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.license_plate.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.wheelchair_accessible {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehicleDescriptor {
        VehicleDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &VehicleDescriptor| { &m.id },
                |m: &mut VehicleDescriptor| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &VehicleDescriptor| { &m.label },
                |m: &mut VehicleDescriptor| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "license_plate",
                |m: &VehicleDescriptor| { &m.license_plate },
                |m: &mut VehicleDescriptor| { &mut m.license_plate },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehicleDescriptor_WheelchairAccessible>>(
                "wheelchair_accessible",
                |m: &VehicleDescriptor| { &m.wheelchair_accessible },
                |m: &mut VehicleDescriptor| { &mut m.wheelchair_accessible },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VehicleDescriptor>(
                "VehicleDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VehicleDescriptor {
        static instance: ::protobuf::rt::LazyV2<VehicleDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VehicleDescriptor::new)
    }
}

impl ::protobuf::Clear for VehicleDescriptor {
    fn clear(&mut self) {
        self.id.clear();
        self.label.clear();
        self.license_plate.clear();
        self.wheelchair_accessible = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehicleDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehicleDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehicleDescriptor_WheelchairAccessible {
    NO_VALUE = 0,
    UNKNOWN = 1,
    WHEELCHAIR_ACCESSIBLE = 2,
    WHEELCHAIR_INACCESSIBLE = 3,
}

impl ::protobuf::ProtobufEnum for VehicleDescriptor_WheelchairAccessible {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehicleDescriptor_WheelchairAccessible> {
        match value {
            0 => ::std::option::Option::Some(VehicleDescriptor_WheelchairAccessible::NO_VALUE),
            1 => ::std::option::Option::Some(VehicleDescriptor_WheelchairAccessible::UNKNOWN),
            2 => ::std::option::Option::Some(VehicleDescriptor_WheelchairAccessible::WHEELCHAIR_ACCESSIBLE),
            3 => ::std::option::Option::Some(VehicleDescriptor_WheelchairAccessible::WHEELCHAIR_INACCESSIBLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehicleDescriptor_WheelchairAccessible] = &[
            VehicleDescriptor_WheelchairAccessible::NO_VALUE,
            VehicleDescriptor_WheelchairAccessible::UNKNOWN,
            VehicleDescriptor_WheelchairAccessible::WHEELCHAIR_ACCESSIBLE,
            VehicleDescriptor_WheelchairAccessible::WHEELCHAIR_INACCESSIBLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<VehicleDescriptor_WheelchairAccessible>("VehicleDescriptor.WheelchairAccessible", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for VehicleDescriptor_WheelchairAccessible {
}

impl ::std::default::Default for VehicleDescriptor_WheelchairAccessible {
    fn default() -> Self {
        VehicleDescriptor_WheelchairAccessible::NO_VALUE
    }
}

impl ::protobuf::reflect::ProtobufValue for VehicleDescriptor_WheelchairAccessible {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntitySelector {
    // message fields
    agency_id: ::protobuf::SingularField<::std::string::String>,
    route_id: ::protobuf::SingularField<::std::string::String>,
    route_type: ::std::option::Option<i32>,
    pub trip: ::protobuf::SingularPtrField<TripDescriptor>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    direction_id: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntitySelector {
    fn default() -> &'a EntitySelector {
        <EntitySelector as ::protobuf::Message>::default_instance()
    }
}

impl EntitySelector {
    pub fn new() -> EntitySelector {
        ::std::default::Default::default()
    }

    // optional string agency_id = 1;


    pub fn get_agency_id(&self) -> &str {
        match self.agency_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_agency_id(&mut self) {
        self.agency_id.clear();
    }

    pub fn has_agency_id(&self) -> bool {
        self.agency_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agency_id(&mut self, v: ::std::string::String) {
        self.agency_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agency_id(&mut self) -> &mut ::std::string::String {
        if self.agency_id.is_none() {
            self.agency_id.set_default();
        }
        self.agency_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_agency_id(&mut self) -> ::std::string::String {
        self.agency_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string route_id = 2;


    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 route_type = 3;


    pub fn get_route_type(&self) -> i32 {
        self.route_type.unwrap_or(0)
    }
    pub fn clear_route_type(&mut self) {
        self.route_type = ::std::option::Option::None;
    }

    pub fn has_route_type(&self) -> bool {
        self.route_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_type(&mut self, v: i32) {
        self.route_type = ::std::option::Option::Some(v);
    }

    // optional .transit_realtime.TripDescriptor trip = 4;


    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| <TripDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    // optional string stop_id = 5;


    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 direction_id = 6;


    pub fn get_direction_id(&self) -> u32 {
        self.direction_id.unwrap_or(0)
    }
    pub fn clear_direction_id(&mut self) {
        self.direction_id = ::std::option::Option::None;
    }

    pub fn has_direction_id(&self) -> bool {
        self.direction_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction_id(&mut self, v: u32) {
        self.direction_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EntitySelector {
    fn is_initialized(&self) -> bool {
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agency_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.route_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.direction_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.agency_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.route_type {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.direction_id {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.agency_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.route_type {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.direction_id {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntitySelector {
        EntitySelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "agency_id",
                |m: &EntitySelector| { &m.agency_id },
                |m: &mut EntitySelector| { &mut m.agency_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "route_id",
                |m: &EntitySelector| { &m.route_id },
                |m: &mut EntitySelector| { &mut m.route_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "route_type",
                |m: &EntitySelector| { &m.route_type },
                |m: &mut EntitySelector| { &mut m.route_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                "trip",
                |m: &EntitySelector| { &m.trip },
                |m: &mut EntitySelector| { &mut m.trip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_id",
                |m: &EntitySelector| { &m.stop_id },
                |m: &mut EntitySelector| { &mut m.stop_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "direction_id",
                |m: &EntitySelector| { &m.direction_id },
                |m: &mut EntitySelector| { &mut m.direction_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EntitySelector>(
                "EntitySelector",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EntitySelector {
        static instance: ::protobuf::rt::LazyV2<EntitySelector> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EntitySelector::new)
    }
}

impl ::protobuf::Clear for EntitySelector {
    fn clear(&mut self) {
        self.agency_id.clear();
        self.route_id.clear();
        self.route_type = ::std::option::Option::None;
        self.trip.clear();
        self.stop_id.clear();
        self.direction_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntitySelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntitySelector {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedString {
    // message fields
    pub translation: ::protobuf::RepeatedField<TranslatedString_Translation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TranslatedString {
    fn default() -> &'a TranslatedString {
        <TranslatedString as ::protobuf::Message>::default_instance()
    }
}

impl TranslatedString {
    pub fn new() -> TranslatedString {
        ::std::default::Default::default()
    }

    // repeated .transit_realtime.TranslatedString.Translation translation = 1;


    pub fn get_translation(&self) -> &[TranslatedString_Translation] {
        &self.translation
    }
    pub fn clear_translation(&mut self) {
        self.translation.clear();
    }

    // Param is passed by value, moved
    pub fn set_translation(&mut self, v: ::protobuf::RepeatedField<TranslatedString_Translation>) {
        self.translation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_translation(&mut self) -> &mut ::protobuf::RepeatedField<TranslatedString_Translation> {
        &mut self.translation
    }

    // Take field
    pub fn take_translation(&mut self) -> ::protobuf::RepeatedField<TranslatedString_Translation> {
        ::std::mem::replace(&mut self.translation, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TranslatedString {
    fn is_initialized(&self) -> bool {
        for v in &self.translation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.translation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.translation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.translation {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedString {
        TranslatedString::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString_Translation>>(
                "translation",
                |m: &TranslatedString| { &m.translation },
                |m: &mut TranslatedString| { &mut m.translation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TranslatedString>(
                "TranslatedString",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TranslatedString {
        static instance: ::protobuf::rt::LazyV2<TranslatedString> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TranslatedString::new)
    }
}

impl ::protobuf::Clear for TranslatedString {
    fn clear(&mut self) {
        self.translation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedString {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedString_Translation {
    // message fields
    text: ::protobuf::SingularField<::std::string::String>,
    language: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TranslatedString_Translation {
    fn default() -> &'a TranslatedString_Translation {
        <TranslatedString_Translation as ::protobuf::Message>::default_instance()
    }
}

impl TranslatedString_Translation {
    pub fn new() -> TranslatedString_Translation {
        ::std::default::Default::default()
    }

    // required string text = 1;


    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string language = 2;


    pub fn get_language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language.set_default();
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TranslatedString_Translation {
    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.language.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedString_Translation {
        TranslatedString_Translation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &TranslatedString_Translation| { &m.text },
                |m: &mut TranslatedString_Translation| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language",
                |m: &TranslatedString_Translation| { &m.language },
                |m: &mut TranslatedString_Translation| { &mut m.language },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TranslatedString_Translation>(
                "TranslatedString.Translation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TranslatedString_Translation {
        static instance: ::protobuf::rt::LazyV2<TranslatedString_Translation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TranslatedString_Translation::new)
    }
}

impl ::protobuf::Clear for TranslatedString_Translation {
    fn clear(&mut self) {
        self.text.clear();
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedString_Translation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedString_Translation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedImage {
    // message fields
    pub localized_image: ::protobuf::RepeatedField<TranslatedImage_LocalizedImage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TranslatedImage {
    fn default() -> &'a TranslatedImage {
        <TranslatedImage as ::protobuf::Message>::default_instance()
    }
}

impl TranslatedImage {
    pub fn new() -> TranslatedImage {
        ::std::default::Default::default()
    }

    // repeated .transit_realtime.TranslatedImage.LocalizedImage localized_image = 1;


    pub fn get_localized_image(&self) -> &[TranslatedImage_LocalizedImage] {
        &self.localized_image
    }
    pub fn clear_localized_image(&mut self) {
        self.localized_image.clear();
    }

    // Param is passed by value, moved
    pub fn set_localized_image(&mut self, v: ::protobuf::RepeatedField<TranslatedImage_LocalizedImage>) {
        self.localized_image = v;
    }

    // Mutable pointer to the field.
    pub fn mut_localized_image(&mut self) -> &mut ::protobuf::RepeatedField<TranslatedImage_LocalizedImage> {
        &mut self.localized_image
    }

    // Take field
    pub fn take_localized_image(&mut self) -> ::protobuf::RepeatedField<TranslatedImage_LocalizedImage> {
        ::std::mem::replace(&mut self.localized_image, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TranslatedImage {
    fn is_initialized(&self) -> bool {
        for v in &self.localized_image {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.localized_image)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.localized_image {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.localized_image {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedImage {
        TranslatedImage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedImage_LocalizedImage>>(
                "localized_image",
                |m: &TranslatedImage| { &m.localized_image },
                |m: &mut TranslatedImage| { &mut m.localized_image },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TranslatedImage>(
                "TranslatedImage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TranslatedImage {
        static instance: ::protobuf::rt::LazyV2<TranslatedImage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TranslatedImage::new)
    }
}

impl ::protobuf::Clear for TranslatedImage {
    fn clear(&mut self) {
        self.localized_image.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedImage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedImage_LocalizedImage {
    // message fields
    url: ::protobuf::SingularField<::std::string::String>,
    media_type: ::protobuf::SingularField<::std::string::String>,
    language: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TranslatedImage_LocalizedImage {
    fn default() -> &'a TranslatedImage_LocalizedImage {
        <TranslatedImage_LocalizedImage as ::protobuf::Message>::default_instance()
    }
}

impl TranslatedImage_LocalizedImage {
    pub fn new() -> TranslatedImage_LocalizedImage {
        ::std::default::Default::default()
    }

    // required string url = 1;


    pub fn get_url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url.set_default();
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string media_type = 2;


    pub fn get_media_type(&self) -> &str {
        match self.media_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_media_type(&mut self) {
        self.media_type.clear();
    }

    pub fn has_media_type(&self) -> bool {
        self.media_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_media_type(&mut self, v: ::std::string::String) {
        self.media_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_media_type(&mut self) -> &mut ::std::string::String {
        if self.media_type.is_none() {
            self.media_type.set_default();
        }
        self.media_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_media_type(&mut self) -> ::std::string::String {
        self.media_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string language = 3;


    pub fn get_language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language.set_default();
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TranslatedImage_LocalizedImage {
    fn is_initialized(&self) -> bool {
        if self.url.is_none() {
            return false;
        }
        if self.media_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.media_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.media_type.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.url.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.media_type.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.language.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedImage_LocalizedImage {
        TranslatedImage_LocalizedImage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &TranslatedImage_LocalizedImage| { &m.url },
                |m: &mut TranslatedImage_LocalizedImage| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "media_type",
                |m: &TranslatedImage_LocalizedImage| { &m.media_type },
                |m: &mut TranslatedImage_LocalizedImage| { &mut m.media_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language",
                |m: &TranslatedImage_LocalizedImage| { &m.language },
                |m: &mut TranslatedImage_LocalizedImage| { &mut m.language },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TranslatedImage_LocalizedImage>(
                "TranslatedImage.LocalizedImage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TranslatedImage_LocalizedImage {
        static instance: ::protobuf::rt::LazyV2<TranslatedImage_LocalizedImage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TranslatedImage_LocalizedImage::new)
    }
}

impl ::protobuf::Clear for TranslatedImage_LocalizedImage {
    fn clear(&mut self) {
        self.url.clear();
        self.media_type.clear();
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedImage_LocalizedImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedImage_LocalizedImage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Shape {
    // message fields
    shape_id: ::protobuf::SingularField<::std::string::String>,
    encoded_polyline: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Shape {
    fn default() -> &'a Shape {
        <Shape as ::protobuf::Message>::default_instance()
    }
}

impl Shape {
    pub fn new() -> Shape {
        ::std::default::Default::default()
    }

    // optional string shape_id = 1;


    pub fn get_shape_id(&self) -> &str {
        match self.shape_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_shape_id(&mut self) {
        self.shape_id.clear();
    }

    pub fn has_shape_id(&self) -> bool {
        self.shape_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shape_id(&mut self, v: ::std::string::String) {
        self.shape_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shape_id(&mut self) -> &mut ::std::string::String {
        if self.shape_id.is_none() {
            self.shape_id.set_default();
        }
        self.shape_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_shape_id(&mut self) -> ::std::string::String {
        self.shape_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string encoded_polyline = 2;


    pub fn get_encoded_polyline(&self) -> &str {
        match self.encoded_polyline.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_encoded_polyline(&mut self) {
        self.encoded_polyline.clear();
    }

    pub fn has_encoded_polyline(&self) -> bool {
        self.encoded_polyline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encoded_polyline(&mut self, v: ::std::string::String) {
        self.encoded_polyline = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encoded_polyline(&mut self) -> &mut ::std::string::String {
        if self.encoded_polyline.is_none() {
            self.encoded_polyline.set_default();
        }
        self.encoded_polyline.as_mut().unwrap()
    }

    // Take field
    pub fn take_encoded_polyline(&mut self) -> ::std::string::String {
        self.encoded_polyline.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Shape {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.shape_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.encoded_polyline)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.shape_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.encoded_polyline.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.shape_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.encoded_polyline.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Shape {
        Shape::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shape_id",
                |m: &Shape| { &m.shape_id },
                |m: &mut Shape| { &mut m.shape_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encoded_polyline",
                |m: &Shape| { &m.encoded_polyline },
                |m: &mut Shape| { &mut m.encoded_polyline },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Shape>(
                "Shape",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Shape {
        static instance: ::protobuf::rt::LazyV2<Shape> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Shape::new)
    }
}

impl ::protobuf::Clear for Shape {
    fn clear(&mut self) {
        self.shape_id.clear();
        self.encoded_polyline.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Shape {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Shape {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Stop {
    // message fields
    stop_id: ::protobuf::SingularField<::std::string::String>,
    pub stop_code: ::protobuf::SingularPtrField<TranslatedString>,
    pub stop_name: ::protobuf::SingularPtrField<TranslatedString>,
    pub tts_stop_name: ::protobuf::SingularPtrField<TranslatedString>,
    pub stop_desc: ::protobuf::SingularPtrField<TranslatedString>,
    stop_lat: ::std::option::Option<f32>,
    stop_lon: ::std::option::Option<f32>,
    zone_id: ::protobuf::SingularField<::std::string::String>,
    pub stop_url: ::protobuf::SingularPtrField<TranslatedString>,
    parent_station: ::protobuf::SingularField<::std::string::String>,
    stop_timezone: ::protobuf::SingularField<::std::string::String>,
    wheelchair_boarding: ::std::option::Option<Stop_WheelchairBoarding>,
    level_id: ::protobuf::SingularField<::std::string::String>,
    pub platform_code: ::protobuf::SingularPtrField<TranslatedString>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Stop {
    fn default() -> &'a Stop {
        <Stop as ::protobuf::Message>::default_instance()
    }
}

impl Stop {
    pub fn new() -> Stop {
        ::std::default::Default::default()
    }

    // optional string stop_id = 1;


    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.TranslatedString stop_code = 2;


    pub fn get_stop_code(&self) -> &TranslatedString {
        self.stop_code.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop_code(&mut self) {
        self.stop_code.clear();
    }

    pub fn has_stop_code(&self) -> bool {
        self.stop_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_code(&mut self, v: TranslatedString) {
        self.stop_code = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_code(&mut self) -> &mut TranslatedString {
        if self.stop_code.is_none() {
            self.stop_code.set_default();
        }
        self.stop_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_code(&mut self) -> TranslatedString {
        self.stop_code.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString stop_name = 3;


    pub fn get_stop_name(&self) -> &TranslatedString {
        self.stop_name.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop_name(&mut self) {
        self.stop_name.clear();
    }

    pub fn has_stop_name(&self) -> bool {
        self.stop_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_name(&mut self, v: TranslatedString) {
        self.stop_name = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_name(&mut self) -> &mut TranslatedString {
        if self.stop_name.is_none() {
            self.stop_name.set_default();
        }
        self.stop_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_name(&mut self) -> TranslatedString {
        self.stop_name.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString tts_stop_name = 4;


    pub fn get_tts_stop_name(&self) -> &TranslatedString {
        self.tts_stop_name.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tts_stop_name(&mut self) {
        self.tts_stop_name.clear();
    }

    pub fn has_tts_stop_name(&self) -> bool {
        self.tts_stop_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tts_stop_name(&mut self, v: TranslatedString) {
        self.tts_stop_name = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tts_stop_name(&mut self) -> &mut TranslatedString {
        if self.tts_stop_name.is_none() {
            self.tts_stop_name.set_default();
        }
        self.tts_stop_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_tts_stop_name(&mut self) -> TranslatedString {
        self.tts_stop_name.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional .transit_realtime.TranslatedString stop_desc = 5;


    pub fn get_stop_desc(&self) -> &TranslatedString {
        self.stop_desc.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop_desc(&mut self) {
        self.stop_desc.clear();
    }

    pub fn has_stop_desc(&self) -> bool {
        self.stop_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_desc(&mut self, v: TranslatedString) {
        self.stop_desc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_desc(&mut self) -> &mut TranslatedString {
        if self.stop_desc.is_none() {
            self.stop_desc.set_default();
        }
        self.stop_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_desc(&mut self) -> TranslatedString {
        self.stop_desc.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional float stop_lat = 6;


    pub fn get_stop_lat(&self) -> f32 {
        self.stop_lat.unwrap_or(0.)
    }
    pub fn clear_stop_lat(&mut self) {
        self.stop_lat = ::std::option::Option::None;
    }

    pub fn has_stop_lat(&self) -> bool {
        self.stop_lat.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_lat(&mut self, v: f32) {
        self.stop_lat = ::std::option::Option::Some(v);
    }

    // optional float stop_lon = 7;


    pub fn get_stop_lon(&self) -> f32 {
        self.stop_lon.unwrap_or(0.)
    }
    pub fn clear_stop_lon(&mut self) {
        self.stop_lon = ::std::option::Option::None;
    }

    pub fn has_stop_lon(&self) -> bool {
        self.stop_lon.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_lon(&mut self, v: f32) {
        self.stop_lon = ::std::option::Option::Some(v);
    }

    // optional string zone_id = 8;


    pub fn get_zone_id(&self) -> &str {
        match self.zone_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_zone_id(&mut self) {
        self.zone_id.clear();
    }

    pub fn has_zone_id(&self) -> bool {
        self.zone_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_zone_id(&mut self, v: ::std::string::String) {
        self.zone_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_zone_id(&mut self) -> &mut ::std::string::String {
        if self.zone_id.is_none() {
            self.zone_id.set_default();
        }
        self.zone_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_zone_id(&mut self) -> ::std::string::String {
        self.zone_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.TranslatedString stop_url = 9;


    pub fn get_stop_url(&self) -> &TranslatedString {
        self.stop_url.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop_url(&mut self) {
        self.stop_url.clear();
    }

    pub fn has_stop_url(&self) -> bool {
        self.stop_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_url(&mut self, v: TranslatedString) {
        self.stop_url = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_url(&mut self) -> &mut TranslatedString {
        if self.stop_url.is_none() {
            self.stop_url.set_default();
        }
        self.stop_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_url(&mut self) -> TranslatedString {
        self.stop_url.take().unwrap_or_else(|| TranslatedString::new())
    }

    // optional string parent_station = 11;


    pub fn get_parent_station(&self) -> &str {
        match self.parent_station.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_parent_station(&mut self) {
        self.parent_station.clear();
    }

    pub fn has_parent_station(&self) -> bool {
        self.parent_station.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent_station(&mut self, v: ::std::string::String) {
        self.parent_station = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_station(&mut self) -> &mut ::std::string::String {
        if self.parent_station.is_none() {
            self.parent_station.set_default();
        }
        self.parent_station.as_mut().unwrap()
    }

    // Take field
    pub fn take_parent_station(&mut self) -> ::std::string::String {
        self.parent_station.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string stop_timezone = 12;


    pub fn get_stop_timezone(&self) -> &str {
        match self.stop_timezone.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_timezone(&mut self) {
        self.stop_timezone.clear();
    }

    pub fn has_stop_timezone(&self) -> bool {
        self.stop_timezone.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_timezone(&mut self, v: ::std::string::String) {
        self.stop_timezone = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_timezone(&mut self) -> &mut ::std::string::String {
        if self.stop_timezone.is_none() {
            self.stop_timezone.set_default();
        }
        self.stop_timezone.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_timezone(&mut self) -> ::std::string::String {
        self.stop_timezone.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.Stop.WheelchairBoarding wheelchair_boarding = 13;


    pub fn get_wheelchair_boarding(&self) -> Stop_WheelchairBoarding {
        self.wheelchair_boarding.unwrap_or(Stop_WheelchairBoarding::UNKNOWN)
    }
    pub fn clear_wheelchair_boarding(&mut self) {
        self.wheelchair_boarding = ::std::option::Option::None;
    }

    pub fn has_wheelchair_boarding(&self) -> bool {
        self.wheelchair_boarding.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wheelchair_boarding(&mut self, v: Stop_WheelchairBoarding) {
        self.wheelchair_boarding = ::std::option::Option::Some(v);
    }

    // optional string level_id = 14;


    pub fn get_level_id(&self) -> &str {
        match self.level_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_level_id(&mut self) {
        self.level_id.clear();
    }

    pub fn has_level_id(&self) -> bool {
        self.level_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_level_id(&mut self, v: ::std::string::String) {
        self.level_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_level_id(&mut self) -> &mut ::std::string::String {
        if self.level_id.is_none() {
            self.level_id.set_default();
        }
        self.level_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_level_id(&mut self) -> ::std::string::String {
        self.level_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.TranslatedString platform_code = 15;


    pub fn get_platform_code(&self) -> &TranslatedString {
        self.platform_code.as_ref().unwrap_or_else(|| <TranslatedString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_platform_code(&mut self) {
        self.platform_code.clear();
    }

    pub fn has_platform_code(&self) -> bool {
        self.platform_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_code(&mut self, v: TranslatedString) {
        self.platform_code = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform_code(&mut self) -> &mut TranslatedString {
        if self.platform_code.is_none() {
            self.platform_code.set_default();
        }
        self.platform_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform_code(&mut self) -> TranslatedString {
        self.platform_code.take().unwrap_or_else(|| TranslatedString::new())
    }
}

impl ::protobuf::Message for Stop {
    fn is_initialized(&self) -> bool {
        for v in &self.stop_code {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_name {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tts_stop_name {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_desc {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_url {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.platform_code {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tts_stop_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop_desc)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.stop_lat = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.stop_lon = ::std::option::Option::Some(tmp);
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.zone_id)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop_url)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.parent_station)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_timezone)?;
                },
                13 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.wheelchair_boarding, 13, &mut self.unknown_fields)?
                },
                14 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.level_id)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.platform_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.stop_code.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop_name.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tts_stop_name.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop_desc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.stop_lat {
            my_size += 5;
        }
        if let Some(v) = self.stop_lon {
            my_size += 5;
        }
        if let Some(ref v) = self.zone_id.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(ref v) = self.stop_url.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.parent_station.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(ref v) = self.stop_timezone.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.wheelchair_boarding {
            my_size += ::protobuf::rt::enum_size(13, v);
        }
        if let Some(ref v) = self.level_id.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(ref v) = self.platform_code.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.stop_code.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop_name.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tts_stop_name.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop_desc.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.stop_lat {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.stop_lon {
            os.write_float(7, v)?;
        }
        if let Some(ref v) = self.zone_id.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(ref v) = self.stop_url.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.parent_station.as_ref() {
            os.write_string(11, &v)?;
        }
        if let Some(ref v) = self.stop_timezone.as_ref() {
            os.write_string(12, &v)?;
        }
        if let Some(v) = self.wheelchair_boarding {
            os.write_enum(13, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.level_id.as_ref() {
            os.write_string(14, &v)?;
        }
        if let Some(ref v) = self.platform_code.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Stop {
        Stop::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_id",
                |m: &Stop| { &m.stop_id },
                |m: &mut Stop| { &mut m.stop_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "stop_code",
                |m: &Stop| { &m.stop_code },
                |m: &mut Stop| { &mut m.stop_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "stop_name",
                |m: &Stop| { &m.stop_name },
                |m: &mut Stop| { &mut m.stop_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "tts_stop_name",
                |m: &Stop| { &m.tts_stop_name },
                |m: &mut Stop| { &mut m.tts_stop_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "stop_desc",
                |m: &Stop| { &m.stop_desc },
                |m: &mut Stop| { &mut m.stop_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "stop_lat",
                |m: &Stop| { &m.stop_lat },
                |m: &mut Stop| { &mut m.stop_lat },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "stop_lon",
                |m: &Stop| { &m.stop_lon },
                |m: &mut Stop| { &mut m.stop_lon },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "zone_id",
                |m: &Stop| { &m.zone_id },
                |m: &mut Stop| { &mut m.zone_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "stop_url",
                |m: &Stop| { &m.stop_url },
                |m: &mut Stop| { &mut m.stop_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent_station",
                |m: &Stop| { &m.parent_station },
                |m: &mut Stop| { &mut m.parent_station },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_timezone",
                |m: &Stop| { &m.stop_timezone },
                |m: &mut Stop| { &mut m.stop_timezone },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Stop_WheelchairBoarding>>(
                "wheelchair_boarding",
                |m: &Stop| { &m.wheelchair_boarding },
                |m: &mut Stop| { &mut m.wheelchair_boarding },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "level_id",
                |m: &Stop| { &m.level_id },
                |m: &mut Stop| { &mut m.level_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                "platform_code",
                |m: &Stop| { &m.platform_code },
                |m: &mut Stop| { &mut m.platform_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Stop>(
                "Stop",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Stop {
        static instance: ::protobuf::rt::LazyV2<Stop> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Stop::new)
    }
}

impl ::protobuf::Clear for Stop {
    fn clear(&mut self) {
        self.stop_id.clear();
        self.stop_code.clear();
        self.stop_name.clear();
        self.tts_stop_name.clear();
        self.stop_desc.clear();
        self.stop_lat = ::std::option::Option::None;
        self.stop_lon = ::std::option::Option::None;
        self.zone_id.clear();
        self.stop_url.clear();
        self.parent_station.clear();
        self.stop_timezone.clear();
        self.wheelchair_boarding = ::std::option::Option::None;
        self.level_id.clear();
        self.platform_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Stop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Stop {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Stop_WheelchairBoarding {
    UNKNOWN = 0,
    AVAILABLE = 1,
    NOT_AVAILABLE = 2,
}

impl ::protobuf::ProtobufEnum for Stop_WheelchairBoarding {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Stop_WheelchairBoarding> {
        match value {
            0 => ::std::option::Option::Some(Stop_WheelchairBoarding::UNKNOWN),
            1 => ::std::option::Option::Some(Stop_WheelchairBoarding::AVAILABLE),
            2 => ::std::option::Option::Some(Stop_WheelchairBoarding::NOT_AVAILABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Stop_WheelchairBoarding] = &[
            Stop_WheelchairBoarding::UNKNOWN,
            Stop_WheelchairBoarding::AVAILABLE,
            Stop_WheelchairBoarding::NOT_AVAILABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Stop_WheelchairBoarding>("Stop.WheelchairBoarding", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Stop_WheelchairBoarding {
}

impl ::std::default::Default for Stop_WheelchairBoarding {
    fn default() -> Self {
        Stop_WheelchairBoarding::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Stop_WheelchairBoarding {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripModifications {
    // message fields
    pub selected_trips: ::protobuf::RepeatedField<TripModifications_SelectedTrips>,
    pub start_times: ::protobuf::RepeatedField<::std::string::String>,
    pub service_dates: ::protobuf::RepeatedField<::std::string::String>,
    pub modifications: ::protobuf::RepeatedField<TripModifications_Modification>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripModifications {
    fn default() -> &'a TripModifications {
        <TripModifications as ::protobuf::Message>::default_instance()
    }
}

impl TripModifications {
    pub fn new() -> TripModifications {
        ::std::default::Default::default()
    }

    // repeated .transit_realtime.TripModifications.SelectedTrips selected_trips = 1;


    pub fn get_selected_trips(&self) -> &[TripModifications_SelectedTrips] {
        &self.selected_trips
    }
    pub fn clear_selected_trips(&mut self) {
        self.selected_trips.clear();
    }

    // Param is passed by value, moved
    pub fn set_selected_trips(&mut self, v: ::protobuf::RepeatedField<TripModifications_SelectedTrips>) {
        self.selected_trips = v;
    }

    // Mutable pointer to the field.
    pub fn mut_selected_trips(&mut self) -> &mut ::protobuf::RepeatedField<TripModifications_SelectedTrips> {
        &mut self.selected_trips
    }

    // Take field
    pub fn take_selected_trips(&mut self) -> ::protobuf::RepeatedField<TripModifications_SelectedTrips> {
        ::std::mem::replace(&mut self.selected_trips, ::protobuf::RepeatedField::new())
    }

    // repeated string start_times = 2;


    pub fn get_start_times(&self) -> &[::std::string::String] {
        &self.start_times
    }
    pub fn clear_start_times(&mut self) {
        self.start_times.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_times(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.start_times = v;
    }

    // Mutable pointer to the field.
    pub fn mut_start_times(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.start_times
    }

    // Take field
    pub fn take_start_times(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.start_times, ::protobuf::RepeatedField::new())
    }

    // repeated string service_dates = 3;


    pub fn get_service_dates(&self) -> &[::std::string::String] {
        &self.service_dates
    }
    pub fn clear_service_dates(&mut self) {
        self.service_dates.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_dates(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.service_dates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_service_dates(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.service_dates
    }

    // Take field
    pub fn take_service_dates(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.service_dates, ::protobuf::RepeatedField::new())
    }

    // repeated .transit_realtime.TripModifications.Modification modifications = 4;


    pub fn get_modifications(&self) -> &[TripModifications_Modification] {
        &self.modifications
    }
    pub fn clear_modifications(&mut self) {
        self.modifications.clear();
    }

    // Param is passed by value, moved
    pub fn set_modifications(&mut self, v: ::protobuf::RepeatedField<TripModifications_Modification>) {
        self.modifications = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modifications(&mut self) -> &mut ::protobuf::RepeatedField<TripModifications_Modification> {
        &mut self.modifications
    }

    // Take field
    pub fn take_modifications(&mut self) -> ::protobuf::RepeatedField<TripModifications_Modification> {
        ::std::mem::replace(&mut self.modifications, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TripModifications {
    fn is_initialized(&self) -> bool {
        for v in &self.selected_trips {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modifications {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.selected_trips)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.start_times)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.service_dates)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.modifications)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.selected_trips {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.start_times {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.service_dates {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.modifications {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.selected_trips {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.start_times {
            os.write_string(2, &v)?;
        };
        for v in &self.service_dates {
            os.write_string(3, &v)?;
        };
        for v in &self.modifications {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripModifications {
        TripModifications::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripModifications_SelectedTrips>>(
                "selected_trips",
                |m: &TripModifications| { &m.selected_trips },
                |m: &mut TripModifications| { &mut m.selected_trips },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_times",
                |m: &TripModifications| { &m.start_times },
                |m: &mut TripModifications| { &mut m.start_times },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_dates",
                |m: &TripModifications| { &m.service_dates },
                |m: &mut TripModifications| { &mut m.service_dates },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripModifications_Modification>>(
                "modifications",
                |m: &TripModifications| { &m.modifications },
                |m: &mut TripModifications| { &mut m.modifications },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripModifications>(
                "TripModifications",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripModifications {
        static instance: ::protobuf::rt::LazyV2<TripModifications> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripModifications::new)
    }
}

impl ::protobuf::Clear for TripModifications {
    fn clear(&mut self) {
        self.selected_trips.clear();
        self.start_times.clear();
        self.service_dates.clear();
        self.modifications.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripModifications {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripModifications {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripModifications_Modification {
    // message fields
    pub start_stop_selector: ::protobuf::SingularPtrField<StopSelector>,
    pub end_stop_selector: ::protobuf::SingularPtrField<StopSelector>,
    propagated_modification_delay: ::std::option::Option<i32>,
    pub replacement_stops: ::protobuf::RepeatedField<ReplacementStop>,
    service_alert_id: ::protobuf::SingularField<::std::string::String>,
    last_modified_time: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripModifications_Modification {
    fn default() -> &'a TripModifications_Modification {
        <TripModifications_Modification as ::protobuf::Message>::default_instance()
    }
}

impl TripModifications_Modification {
    pub fn new() -> TripModifications_Modification {
        ::std::default::Default::default()
    }

    // optional .transit_realtime.StopSelector start_stop_selector = 1;


    pub fn get_start_stop_selector(&self) -> &StopSelector {
        self.start_stop_selector.as_ref().unwrap_or_else(|| <StopSelector as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_stop_selector(&mut self) {
        self.start_stop_selector.clear();
    }

    pub fn has_start_stop_selector(&self) -> bool {
        self.start_stop_selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_stop_selector(&mut self, v: StopSelector) {
        self.start_stop_selector = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_stop_selector(&mut self) -> &mut StopSelector {
        if self.start_stop_selector.is_none() {
            self.start_stop_selector.set_default();
        }
        self.start_stop_selector.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_stop_selector(&mut self) -> StopSelector {
        self.start_stop_selector.take().unwrap_or_else(|| StopSelector::new())
    }

    // optional .transit_realtime.StopSelector end_stop_selector = 2;


    pub fn get_end_stop_selector(&self) -> &StopSelector {
        self.end_stop_selector.as_ref().unwrap_or_else(|| <StopSelector as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_stop_selector(&mut self) {
        self.end_stop_selector.clear();
    }

    pub fn has_end_stop_selector(&self) -> bool {
        self.end_stop_selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_stop_selector(&mut self, v: StopSelector) {
        self.end_stop_selector = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_stop_selector(&mut self) -> &mut StopSelector {
        if self.end_stop_selector.is_none() {
            self.end_stop_selector.set_default();
        }
        self.end_stop_selector.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_stop_selector(&mut self) -> StopSelector {
        self.end_stop_selector.take().unwrap_or_else(|| StopSelector::new())
    }

    // optional int32 propagated_modification_delay = 3;


    pub fn get_propagated_modification_delay(&self) -> i32 {
        self.propagated_modification_delay.unwrap_or(0i32)
    }
    pub fn clear_propagated_modification_delay(&mut self) {
        self.propagated_modification_delay = ::std::option::Option::None;
    }

    pub fn has_propagated_modification_delay(&self) -> bool {
        self.propagated_modification_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propagated_modification_delay(&mut self, v: i32) {
        self.propagated_modification_delay = ::std::option::Option::Some(v);
    }

    // repeated .transit_realtime.ReplacementStop replacement_stops = 4;


    pub fn get_replacement_stops(&self) -> &[ReplacementStop] {
        &self.replacement_stops
    }
    pub fn clear_replacement_stops(&mut self) {
        self.replacement_stops.clear();
    }

    // Param is passed by value, moved
    pub fn set_replacement_stops(&mut self, v: ::protobuf::RepeatedField<ReplacementStop>) {
        self.replacement_stops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_replacement_stops(&mut self) -> &mut ::protobuf::RepeatedField<ReplacementStop> {
        &mut self.replacement_stops
    }

    // Take field
    pub fn take_replacement_stops(&mut self) -> ::protobuf::RepeatedField<ReplacementStop> {
        ::std::mem::replace(&mut self.replacement_stops, ::protobuf::RepeatedField::new())
    }

    // optional string service_alert_id = 5;


    pub fn get_service_alert_id(&self) -> &str {
        match self.service_alert_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_service_alert_id(&mut self) {
        self.service_alert_id.clear();
    }

    pub fn has_service_alert_id(&self) -> bool {
        self.service_alert_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_alert_id(&mut self, v: ::std::string::String) {
        self.service_alert_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_alert_id(&mut self) -> &mut ::std::string::String {
        if self.service_alert_id.is_none() {
            self.service_alert_id.set_default();
        }
        self.service_alert_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_alert_id(&mut self) -> ::std::string::String {
        self.service_alert_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 last_modified_time = 6;


    pub fn get_last_modified_time(&self) -> u64 {
        self.last_modified_time.unwrap_or(0)
    }
    pub fn clear_last_modified_time(&mut self) {
        self.last_modified_time = ::std::option::Option::None;
    }

    pub fn has_last_modified_time(&self) -> bool {
        self.last_modified_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_modified_time(&mut self, v: u64) {
        self.last_modified_time = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TripModifications_Modification {
    fn is_initialized(&self) -> bool {
        for v in &self.start_stop_selector {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_stop_selector {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.replacement_stops {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_stop_selector)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_stop_selector)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.propagated_modification_delay = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.replacement_stops)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.service_alert_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_modified_time = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.start_stop_selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_stop_selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.propagated_modification_delay {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.replacement_stops {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.service_alert_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.last_modified_time {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.start_stop_selector.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_stop_selector.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.propagated_modification_delay {
            os.write_int32(3, v)?;
        }
        for v in &self.replacement_stops {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.service_alert_id.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.last_modified_time {
            os.write_uint64(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripModifications_Modification {
        TripModifications_Modification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StopSelector>>(
                "start_stop_selector",
                |m: &TripModifications_Modification| { &m.start_stop_selector },
                |m: &mut TripModifications_Modification| { &mut m.start_stop_selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StopSelector>>(
                "end_stop_selector",
                |m: &TripModifications_Modification| { &m.end_stop_selector },
                |m: &mut TripModifications_Modification| { &mut m.end_stop_selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "propagated_modification_delay",
                |m: &TripModifications_Modification| { &m.propagated_modification_delay },
                |m: &mut TripModifications_Modification| { &mut m.propagated_modification_delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReplacementStop>>(
                "replacement_stops",
                |m: &TripModifications_Modification| { &m.replacement_stops },
                |m: &mut TripModifications_Modification| { &mut m.replacement_stops },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_alert_id",
                |m: &TripModifications_Modification| { &m.service_alert_id },
                |m: &mut TripModifications_Modification| { &mut m.service_alert_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_modified_time",
                |m: &TripModifications_Modification| { &m.last_modified_time },
                |m: &mut TripModifications_Modification| { &mut m.last_modified_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripModifications_Modification>(
                "TripModifications.Modification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripModifications_Modification {
        static instance: ::protobuf::rt::LazyV2<TripModifications_Modification> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripModifications_Modification::new)
    }
}

impl ::protobuf::Clear for TripModifications_Modification {
    fn clear(&mut self) {
        self.start_stop_selector.clear();
        self.end_stop_selector.clear();
        self.propagated_modification_delay = ::std::option::Option::None;
        self.replacement_stops.clear();
        self.service_alert_id.clear();
        self.last_modified_time = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripModifications_Modification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripModifications_Modification {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripModifications_SelectedTrips {
    // message fields
    pub trip_ids: ::protobuf::RepeatedField<::std::string::String>,
    shape_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripModifications_SelectedTrips {
    fn default() -> &'a TripModifications_SelectedTrips {
        <TripModifications_SelectedTrips as ::protobuf::Message>::default_instance()
    }
}

impl TripModifications_SelectedTrips {
    pub fn new() -> TripModifications_SelectedTrips {
        ::std::default::Default::default()
    }

    // repeated string trip_ids = 1;


    pub fn get_trip_ids(&self) -> &[::std::string::String] {
        &self.trip_ids
    }
    pub fn clear_trip_ids(&mut self) {
        self.trip_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_trip_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.trip_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trip_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.trip_ids
    }

    // Take field
    pub fn take_trip_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.trip_ids, ::protobuf::RepeatedField::new())
    }

    // optional string shape_id = 2;


    pub fn get_shape_id(&self) -> &str {
        match self.shape_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_shape_id(&mut self) {
        self.shape_id.clear();
    }

    pub fn has_shape_id(&self) -> bool {
        self.shape_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shape_id(&mut self, v: ::std::string::String) {
        self.shape_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shape_id(&mut self) -> &mut ::std::string::String {
        if self.shape_id.is_none() {
            self.shape_id.set_default();
        }
        self.shape_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_shape_id(&mut self) -> ::std::string::String {
        self.shape_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TripModifications_SelectedTrips {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.trip_ids)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.shape_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.trip_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(ref v) = self.shape_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.trip_ids {
            os.write_string(1, &v)?;
        };
        if let Some(ref v) = self.shape_id.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripModifications_SelectedTrips {
        TripModifications_SelectedTrips::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trip_ids",
                |m: &TripModifications_SelectedTrips| { &m.trip_ids },
                |m: &mut TripModifications_SelectedTrips| { &mut m.trip_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shape_id",
                |m: &TripModifications_SelectedTrips| { &m.shape_id },
                |m: &mut TripModifications_SelectedTrips| { &mut m.shape_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TripModifications_SelectedTrips>(
                "TripModifications.SelectedTrips",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TripModifications_SelectedTrips {
        static instance: ::protobuf::rt::LazyV2<TripModifications_SelectedTrips> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TripModifications_SelectedTrips::new)
    }
}

impl ::protobuf::Clear for TripModifications_SelectedTrips {
    fn clear(&mut self) {
        self.trip_ids.clear();
        self.shape_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripModifications_SelectedTrips {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripModifications_SelectedTrips {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopSelector {
    // message fields
    stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopSelector {
    fn default() -> &'a StopSelector {
        <StopSelector as ::protobuf::Message>::default_instance()
    }
}

impl StopSelector {
    pub fn new() -> StopSelector {
        ::std::default::Default::default()
    }

    // optional uint32 stop_sequence = 1;


    pub fn get_stop_sequence(&self) -> u32 {
        self.stop_sequence.unwrap_or(0)
    }
    pub fn clear_stop_sequence(&mut self) {
        self.stop_sequence = ::std::option::Option::None;
    }

    pub fn has_stop_sequence(&self) -> bool {
        self.stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_sequence(&mut self, v: u32) {
        self.stop_sequence = ::std::option::Option::Some(v);
    }

    // optional string stop_id = 2;


    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for StopSelector {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stop_sequence = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.stop_sequence {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.stop_sequence {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopSelector {
        StopSelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "stop_sequence",
                |m: &StopSelector| { &m.stop_sequence },
                |m: &mut StopSelector| { &mut m.stop_sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_id",
                |m: &StopSelector| { &m.stop_id },
                |m: &mut StopSelector| { &mut m.stop_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopSelector>(
                "StopSelector",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopSelector {
        static instance: ::protobuf::rt::LazyV2<StopSelector> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopSelector::new)
    }
}

impl ::protobuf::Clear for StopSelector {
    fn clear(&mut self) {
        self.stop_sequence = ::std::option::Option::None;
        self.stop_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopSelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopSelector {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReplacementStop {
    // message fields
    travel_time_to_stop: ::std::option::Option<i32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReplacementStop {
    fn default() -> &'a ReplacementStop {
        <ReplacementStop as ::protobuf::Message>::default_instance()
    }
}

impl ReplacementStop {
    pub fn new() -> ReplacementStop {
        ::std::default::Default::default()
    }

    // optional int32 travel_time_to_stop = 1;


    pub fn get_travel_time_to_stop(&self) -> i32 {
        self.travel_time_to_stop.unwrap_or(0)
    }
    pub fn clear_travel_time_to_stop(&mut self) {
        self.travel_time_to_stop = ::std::option::Option::None;
    }

    pub fn has_travel_time_to_stop(&self) -> bool {
        self.travel_time_to_stop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_travel_time_to_stop(&mut self, v: i32) {
        self.travel_time_to_stop = ::std::option::Option::Some(v);
    }

    // optional string stop_id = 2;


    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReplacementStop {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.travel_time_to_stop = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.travel_time_to_stop {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.travel_time_to_stop {
            os.write_int32(1, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReplacementStop {
        ReplacementStop::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "travel_time_to_stop",
                |m: &ReplacementStop| { &m.travel_time_to_stop },
                |m: &mut ReplacementStop| { &mut m.travel_time_to_stop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stop_id",
                |m: &ReplacementStop| { &m.stop_id },
                |m: &mut ReplacementStop| { &mut m.stop_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReplacementStop>(
                "ReplacementStop",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReplacementStop {
        static instance: ::protobuf::rt::LazyV2<ReplacementStop> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReplacementStop::new)
    }
}

impl ::protobuf::Clear for ReplacementStop {
    fn clear(&mut self) {
        self.travel_time_to_stop = ::std::option::Option::None;
        self.stop_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReplacementStop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplacementStop {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gtfs-realtime.proto\x12\x10transit_realtime\"\x89\x01\n\x0bFeedMes\
    sage\x124\n\x06header\x18\x01\x20\x02(\x0b2\x1c.transit_realtime.FeedHea\
    derR\x06header\x124\n\x06entity\x18\x02\x20\x03(\x0b2\x1c.transit_realti\
    me.FeedEntityR\x06entity*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\
    \x90N\"\x87\x02\n\nFeedHeader\x122\n\x15gtfs_realtime_version\x18\x01\
    \x20\x02(\tR\x13gtfsRealtimeVersion\x12a\n\x0eincrementality\x18\x02\x20\
    \x01(\x0e2+.transit_realtime.FeedHeader.Incrementality:\x0cFULL_DATASETR\
    \x0eincrementality\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp\
    \"4\n\x0eIncrementality\x12\x10\n\x0cFULL_DATASET\x10\0\x12\x10\n\x0cDIF\
    FERENTIAL\x10\x01*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\
    \xac\x03\n\nFeedEntity\x12\x0e\n\x02id\x18\x01\x20\x02(\tR\x02id\x12$\n\
    \nis_deleted\x18\x02\x20\x01(\x08:\x05falseR\tisDeleted\x12=\n\x0btrip_u\
    pdate\x18\x03\x20\x01(\x0b2\x1c.transit_realtime.TripUpdateR\ntripUpdate\
    \x12;\n\x07vehicle\x18\x04\x20\x01(\x0b2!.transit_realtime.VehiclePositi\
    onR\x07vehicle\x12-\n\x05alert\x18\x05\x20\x01(\x0b2\x17.transit_realtim\
    e.AlertR\x05alert\x12-\n\x05shape\x18\x06\x20\x01(\x0b2\x17.transit_real\
    time.ShapeR\x05shape\x12*\n\x04stop\x18\x07\x20\x01(\x0b2\x16.transit_re\
    altime.StopR\x04stop\x12R\n\x12trip_modifications\x18\x08\x20\x01(\x0b2#\
    .transit_realtime.TripModificationsR\x11tripModifications*\x06\x08\xe8\
    \x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xed\n\n\nTripUpdate\x124\n\x04\
    trip\x18\x01\x20\x02(\x0b2\x20.transit_realtime.TripDescriptorR\x04trip\
    \x12=\n\x07vehicle\x18\x03\x20\x01(\x0b2#.transit_realtime.VehicleDescri\
    ptorR\x07vehicle\x12U\n\x10stop_time_update\x18\x02\x20\x03(\x0b2+.trans\
    it_realtime.TripUpdate.StopTimeUpdateR\x0estopTimeUpdate\x12\x1c\n\ttime\
    stamp\x18\x04\x20\x01(\x04R\ttimestamp\x12\x14\n\x05delay\x18\x05\x20\
    \x01(\x05R\x05delay\x12T\n\x0ftrip_properties\x18\x06\x20\x01(\x0b2+.tra\
    nsit_realtime.TripUpdate.TripPropertiesR\x0etripProperties\x1ak\n\rStopT\
    imeEvent\x12\x14\n\x05delay\x18\x01\x20\x01(\x05R\x05delay\x12\x12\n\x04\
    time\x18\x02\x20\x01(\x03R\x04time\x12\x20\n\x0buncertainty\x18\x03\x20\
    \x01(\x05R\x0buncertainty*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\
    \x90N\x1a\xf6\x05\n\x0eStopTimeUpdate\x12#\n\rstop_sequence\x18\x01\x20\
    \x01(\rR\x0cstopSequence\x12\x17\n\x07stop_id\x18\x04\x20\x01(\tR\x06sto\
    pId\x12D\n\x07arrival\x18\x02\x20\x01(\x0b2*.transit_realtime.TripUpdate\
    .StopTimeEventR\x07arrival\x12H\n\tdeparture\x18\x03\x20\x01(\x0b2*.tran\
    sit_realtime.TripUpdate.StopTimeEventR\tdeparture\x12o\n\x1adeparture_oc\
    cupancy_status\x18\x07\x20\x01(\x0e21.transit_realtime.VehiclePosition.O\
    ccupancyStatusR\x18departureOccupancyStatus\x12\x80\x01\n\x15schedule_re\
    lationship\x18\x05\x20\x01(\x0e2@.transit_realtime.TripUpdate.StopTimeUp\
    date.ScheduleRelationship:\tSCHEDULEDR\x14scheduleRelationship\x12p\n\
    \x14stop_time_properties\x18\x06\x20\x01(\x0b2>.transit_realtime.TripUpd\
    ate.StopTimeUpdate.StopTimePropertiesR\x12stopTimeProperties\x1aN\n\x12S\
    topTimeProperties\x12(\n\x10assigned_stop_id\x18\x01\x20\x01(\tR\x0eassi\
    gnedStopId*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"P\n\x14S\
    cheduleRelationship\x12\r\n\tSCHEDULED\x10\0\x12\x0b\n\x07SKIPPED\x10\
    \x01\x12\x0b\n\x07NO_DATA\x10\x02\x12\x0f\n\x0bUNSCHEDULED\x10\x03*\x06\
    \x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\x1a\x92\x01\n\x0eTripPro\
    perties\x12\x17\n\x07trip_id\x18\x01\x20\x01(\tR\x06tripId\x12\x1d\n\nst\
    art_date\x18\x02\x20\x01(\tR\tstartDate\x12\x1d\n\nstart_time\x18\x03\
    \x20\x01(\tR\tstartTime\x12\x19\n\x08shape_id\x18\x04\x20\x01(\tR\x07sha\
    peId*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N*\x06\x08\xe8\
    \x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xbf\x0b\n\x0fVehiclePosition\
    \x124\n\x04trip\x18\x01\x20\x01(\x0b2\x20.transit_realtime.TripDescripto\
    rR\x04trip\x12=\n\x07vehicle\x18\x08\x20\x01(\x0b2#.transit_realtime.Veh\
    icleDescriptorR\x07vehicle\x126\n\x08position\x18\x02\x20\x01(\x0b2\x1a.\
    transit_realtime.PositionR\x08position\x122\n\x15current_stop_sequence\
    \x18\x03\x20\x01(\rR\x13currentStopSequence\x12\x17\n\x07stop_id\x18\x07\
    \x20\x01(\tR\x06stopId\x12i\n\x0ecurrent_status\x18\x04\x20\x01(\x0e23.t\
    ransit_realtime.VehiclePosition.VehicleStopStatus:\rIN_TRANSIT_TOR\rcurr\
    entStatus\x12\x1c\n\ttimestamp\x18\x05\x20\x01(\x04R\ttimestamp\x12\\\n\
    \x10congestion_level\x18\x06\x20\x01(\x0e21.transit_realtime.VehiclePosi\
    tion.CongestionLevelR\x0fcongestionLevel\x12\\\n\x10occupancy_status\x18\
    \t\x20\x01(\x0e21.transit_realtime.VehiclePosition.OccupancyStatusR\x0fo\
    ccupancyStatus\x121\n\x14occupancy_percentage\x18\n\x20\x01(\rR\x13occup\
    ancyPercentage\x12g\n\x16multi_carriage_details\x18\x0b\x20\x03(\x0b21.t\
    ransit_realtime.VehiclePosition.CarriageDetailsR\x14multiCarriageDetails\
    \x1a\x9c\x02\n\x0fCarriageDetails\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\x12o\n\x10occupan\
    cy_status\x18\x03\x20\x01(\x0e21.transit_realtime.VehiclePosition.Occupa\
    ncyStatus:\x11NO_DATA_AVAILABLER\x0foccupancyStatus\x125\n\x14occupancy_\
    percentage\x18\x04\x20\x01(\x05:\x02-1R\x13occupancyPercentage\x12+\n\
    \x11carriage_sequence\x18\x05\x20\x01(\rR\x10carriageSequence*\x06\x08\
    \xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"G\n\x11VehicleStopStatus\
    \x12\x0f\n\x0bINCOMING_AT\x10\0\x12\x0e\n\nSTOPPED_AT\x10\x01\x12\x11\n\
    \rIN_TRANSIT_TO\x10\x02\"}\n\x0fCongestionLevel\x12\x1c\n\x18UNKNOWN_CON\
    GESTION_LEVEL\x10\0\x12\x14\n\x10RUNNING_SMOOTHLY\x10\x01\x12\x0f\n\x0bS\
    TOP_AND_GO\x10\x02\x12\x0e\n\nCONGESTION\x10\x03\x12\x15\n\x11SEVERE_CON\
    GESTION\x10\x04\"\xd9\x01\n\x0fOccupancyStatus\x12\t\n\x05EMPTY\x10\0\
    \x12\x18\n\x14MANY_SEATS_AVAILABLE\x10\x01\x12\x17\n\x13FEW_SEATS_AVAILA\
    BLE\x10\x02\x12\x16\n\x12STANDING_ROOM_ONLY\x10\x03\x12\x1e\n\x1aCRUSHED\
    _STANDING_ROOM_ONLY\x10\x04\x12\x08\n\x04FULL\x10\x05\x12\x1c\n\x18NOT_A\
    CCEPTING_PASSENGERS\x10\x06\x12\x15\n\x11NO_DATA_AVAILABLE\x10\x07\x12\
    \x11\n\rNOT_BOARDABLE\x10\x08*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\
    \x10\x90N\"\xa4\x0c\n\x05Alert\x12@\n\ractive_period\x18\x01\x20\x03(\
    \x0b2\x1b.transit_realtime.TimeRangeR\x0cactivePeriod\x12I\n\x0finformed\
    _entity\x18\x05\x20\x03(\x0b2\x20.transit_realtime.EntitySelectorR\x0ein\
    formedEntity\x12B\n\x05cause\x18\x06\x20\x01(\x0e2\x1d.transit_realtime.\
    Alert.Cause:\rUNKNOWN_CAUSER\x05cause\x12F\n\x06effect\x18\x07\x20\x01(\
    \x0e2\x1e.transit_realtime.Alert.Effect:\x0eUNKNOWN_EFFECTR\x06effect\
    \x124\n\x03url\x18\x08\x20\x01(\x0b2\".transit_realtime.TranslatedString\
    R\x03url\x12C\n\x0bheader_text\x18\n\x20\x01(\x0b2\".transit_realtime.Tr\
    anslatedStringR\nheaderText\x12M\n\x10description_text\x18\x0b\x20\x01(\
    \x0b2\".transit_realtime.TranslatedStringR\x0fdescriptionText\x12J\n\x0f\
    tts_header_text\x18\x0c\x20\x01(\x0b2\".transit_realtime.TranslatedStrin\
    gR\rttsHeaderText\x12T\n\x14tts_description_text\x18\r\x20\x01(\x0b2\".t\
    ransit_realtime.TranslatedStringR\x12ttsDescriptionText\x12^\n\x0eseveri\
    ty_level\x18\x0e\x20\x01(\x0e2%.transit_realtime.Alert.SeverityLevel:\
    \x10UNKNOWN_SEVERITYR\rseverityLevel\x127\n\x05image\x18\x0f\x20\x01(\
    \x0b2!.transit_realtime.TranslatedImageR\x05image\x12X\n\x16image_altern\
    ative_text\x18\x10\x20\x01(\x0b2\".transit_realtime.TranslatedStringR\
    \x14imageAlternativeText\x12E\n\x0ccause_detail\x18\x11\x20\x01(\x0b2\".\
    transit_realtime.TranslatedStringR\x0bcauseDetail\x12G\n\reffect_detail\
    \x18\x12\x20\x01(\x0b2\".transit_realtime.TranslatedStringR\x0ceffectDet\
    ail\"\xd8\x01\n\x05Cause\x12\x11\n\rUNKNOWN_CAUSE\x10\x01\x12\x0f\n\x0bO\
    THER_CAUSE\x10\x02\x12\x15\n\x11TECHNICAL_PROBLEM\x10\x03\x12\n\n\x06STR\
    IKE\x10\x04\x12\x11\n\rDEMONSTRATION\x10\x05\x12\x0c\n\x08ACCIDENT\x10\
    \x06\x12\x0b\n\x07HOLIDAY\x10\x07\x12\x0b\n\x07WEATHER\x10\x08\x12\x0f\n\
    \x0bMAINTENANCE\x10\t\x12\x10\n\x0cCONSTRUCTION\x10\n\x12\x13\n\x0fPOLIC\
    E_ACTIVITY\x10\x0b\x12\x15\n\x11MEDICAL_EMERGENCY\x10\x0c\"\xdd\x01\n\
    \x06Effect\x12\x0e\n\nNO_SERVICE\x10\x01\x12\x13\n\x0fREDUCED_SERVICE\
    \x10\x02\x12\x16\n\x12SIGNIFICANT_DELAYS\x10\x03\x12\n\n\x06DETOUR\x10\
    \x04\x12\x16\n\x12ADDITIONAL_SERVICE\x10\x05\x12\x14\n\x10MODIFIED_SERVI\
    CE\x10\x06\x12\x10\n\x0cOTHER_EFFECT\x10\x07\x12\x12\n\x0eUNKNOWN_EFFECT\
    \x10\x08\x12\x0e\n\nSTOP_MOVED\x10\t\x12\r\n\tNO_EFFECT\x10\n\x12\x17\n\
    \x13ACCESSIBILITY_ISSUE\x10\x0b\"H\n\rSeverityLevel\x12\x14\n\x10UNKNOWN\
    _SEVERITY\x10\x01\x12\x08\n\x04INFO\x10\x02\x12\x0b\n\x07WARNING\x10\x03\
    \x12\n\n\x06SEVERE\x10\x04*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\
    \x10\x90N\"C\n\tTimeRange\x12\x14\n\x05start\x18\x01\x20\x01(\x04R\x05st\
    art\x12\x10\n\x03end\x18\x02\x20\x01(\x04R\x03end*\x06\x08\xe8\x07\x10\
    \xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xa0\x01\n\x08Position\x12\x1a\n\x08lat\
    itude\x18\x01\x20\x02(\x02R\x08latitude\x12\x1c\n\tlongitude\x18\x02\x20\
    \x02(\x02R\tlongitude\x12\x18\n\x07bearing\x18\x03\x20\x01(\x02R\x07bear\
    ing\x12\x1a\n\x08odometer\x18\x04\x20\x01(\x01R\x08odometer\x12\x14\n\
    \x05speed\x18\x05\x20\x01(\x02R\x05speed*\x06\x08\xe8\x07\x10\xd0\x0f*\
    \x06\x08\xa8F\x10\x90N\"\xee\x04\n\x0eTripDescriptor\x12\x17\n\x07trip_i\
    d\x18\x01\x20\x01(\tR\x06tripId\x12\x19\n\x08route_id\x18\x05\x20\x01(\t\
    R\x07routeId\x12!\n\x0cdirection_id\x18\x06\x20\x01(\rR\x0bdirectionId\
    \x12\x1d\n\nstart_time\x18\x02\x20\x01(\tR\tstartTime\x12\x1d\n\nstart_d\
    ate\x18\x03\x20\x01(\tR\tstartDate\x12j\n\x15schedule_relationship\x18\
    \x04\x20\x01(\x0e25.transit_realtime.TripDescriptor.ScheduleRelationship\
    R\x14scheduleRelationship\x12Z\n\rmodified_trip\x18\x07\x20\x01(\x0b25.t\
    ransit_realtime.TripDescriptor.ModifiedTripSelectorR\x0cmodifiedTrip\x1a\
    k\n\x14ModifiedTripSelector\x12)\n\x10modifications_id\x18\x01\x20\x01(\
    \tR\x0fmodificationsId\x12(\n\x10affected_trip_id\x18\x02\x20\x01(\tR\
    \x0eaffectedTripId\"\x81\x01\n\x14ScheduleRelationship\x12\r\n\tSCHEDULE\
    D\x10\0\x12\t\n\x05ADDED\x10\x01\x12\x0f\n\x0bUNSCHEDULED\x10\x02\x12\
    \x0c\n\x08CANCELED\x10\x03\x12\x13\n\x0bREPLACEMENT\x10\x05\x1a\x02\x08\
    \x01\x12\x0e\n\nDUPLICATED\x10\x06\x12\x0b\n\x07DELETED\x10\x07*\x06\x08\
    \xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xd2\x02\n\x11VehicleDescri\
    ptor\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05label\x18\
    \x02\x20\x01(\tR\x05label\x12#\n\rlicense_plate\x18\x03\x20\x01(\tR\x0cl\
    icensePlate\x12w\n\x15wheelchair_accessible\x18\x04\x20\x01(\x0e28.trans\
    it_realtime.VehicleDescriptor.WheelchairAccessible:\x08NO_VALUER\x14whee\
    lchairAccessible\"i\n\x14WheelchairAccessible\x12\x0c\n\x08NO_VALUE\x10\
    \0\x12\x0b\n\x07UNKNOWN\x10\x01\x12\x19\n\x15WHEELCHAIR_ACCESSIBLE\x10\
    \x02\x12\x1b\n\x17WHEELCHAIR_INACCESSIBLE\x10\x03*\x06\x08\xe8\x07\x10\
    \xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xe9\x01\n\x0eEntitySelector\x12\x1b\n\
    \tagency_id\x18\x01\x20\x01(\tR\x08agencyId\x12\x19\n\x08route_id\x18\
    \x02\x20\x01(\tR\x07routeId\x12\x1d\n\nroute_type\x18\x03\x20\x01(\x05R\
    \trouteType\x124\n\x04trip\x18\x04\x20\x01(\x0b2\x20.transit_realtime.Tr\
    ipDescriptorR\x04trip\x12\x17\n\x07stop_id\x18\x05\x20\x01(\tR\x06stopId\
    \x12!\n\x0cdirection_id\x18\x06\x20\x01(\rR\x0bdirectionId*\x06\x08\xe8\
    \x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xc3\x01\n\x10TranslatedString\
    \x12P\n\x0btranslation\x18\x01\x20\x03(\x0b2..transit_realtime.Translate\
    dString.TranslationR\x0btranslation\x1aM\n\x0bTranslation\x12\x12\n\x04t\
    ext\x18\x01\x20\x02(\tR\x04text\x12\x1a\n\x08language\x18\x02\x20\x01(\t\
    R\x08language*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N*\x06\
    \x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\xeb\x01\n\x0fTranslate\
    dImage\x12Y\n\x0flocalized_image\x18\x01\x20\x03(\x0b20.transit_realtime\
    .TranslatedImage.LocalizedImageR\x0elocalizedImage\x1am\n\x0eLocalizedIm\
    age\x12\x10\n\x03url\x18\x01\x20\x02(\tR\x03url\x12\x1d\n\nmedia_type\
    \x18\x02\x20\x02(\tR\tmediaType\x12\x1a\n\x08language\x18\x03\x20\x01(\t\
    R\x08language*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N*\x06\
    \x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"]\n\x05Shape\x12\x19\n\
    \x08shape_id\x18\x01\x20\x01(\tR\x07shapeId\x12)\n\x10encoded_polyline\
    \x18\x02\x20\x01(\tR\x0fencodedPolyline*\x06\x08\xe8\x07\x10\xd0\x0f*\
    \x06\x08\xa8F\x10\x90N\"\xa2\x06\n\x04Stop\x12\x17\n\x07stop_id\x18\x01\
    \x20\x01(\tR\x06stopId\x12?\n\tstop_code\x18\x02\x20\x01(\x0b2\".transit\
    _realtime.TranslatedStringR\x08stopCode\x12?\n\tstop_name\x18\x03\x20\
    \x01(\x0b2\".transit_realtime.TranslatedStringR\x08stopName\x12F\n\rtts_\
    stop_name\x18\x04\x20\x01(\x0b2\".transit_realtime.TranslatedStringR\x0b\
    ttsStopName\x12?\n\tstop_desc\x18\x05\x20\x01(\x0b2\".transit_realtime.T\
    ranslatedStringR\x08stopDesc\x12\x19\n\x08stop_lat\x18\x06\x20\x01(\x02R\
    \x07stopLat\x12\x19\n\x08stop_lon\x18\x07\x20\x01(\x02R\x07stopLon\x12\
    \x17\n\x07zone_id\x18\x08\x20\x01(\tR\x06zoneId\x12=\n\x08stop_url\x18\t\
    \x20\x01(\x0b2\".transit_realtime.TranslatedStringR\x07stopUrl\x12%\n\
    \x0eparent_station\x18\x0b\x20\x01(\tR\rparentStation\x12#\n\rstop_timez\
    one\x18\x0c\x20\x01(\tR\x0cstopTimezone\x12c\n\x13wheelchair_boarding\
    \x18\r\x20\x01(\x0e2).transit_realtime.Stop.WheelchairBoarding:\x07UNKNO\
    WNR\x12wheelchairBoarding\x12\x19\n\x08level_id\x18\x0e\x20\x01(\tR\x07l\
    evelId\x12G\n\rplatform_code\x18\x0f\x20\x01(\x0b2\".transit_realtime.Tr\
    anslatedStringR\x0cplatformCode\"C\n\x12WheelchairBoarding\x12\x0b\n\x07\
    UNKNOWN\x10\0\x12\r\n\tAVAILABLE\x10\x01\x12\x11\n\rNOT_AVAILABLE\x10\
    \x02*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"\x9e\x06\n\x11\
    TripModifications\x12X\n\x0eselected_trips\x18\x01\x20\x03(\x0b21.transi\
    t_realtime.TripModifications.SelectedTripsR\rselectedTrips\x12\x1f\n\x0b\
    start_times\x18\x02\x20\x03(\tR\nstartTimes\x12#\n\rservice_dates\x18\
    \x03\x20\x03(\tR\x0cserviceDates\x12V\n\rmodifications\x18\x04\x20\x03(\
    \x0b20.transit_realtime.TripModifications.ModificationR\rmodifications\
    \x1a\xa9\x03\n\x0cModification\x12N\n\x13start_stop_selector\x18\x01\x20\
    \x01(\x0b2\x1e.transit_realtime.StopSelectorR\x11startStopSelector\x12J\
    \n\x11end_stop_selector\x18\x02\x20\x01(\x0b2\x1e.transit_realtime.StopS\
    electorR\x0fendStopSelector\x12E\n\x1dpropagated_modification_delay\x18\
    \x03\x20\x01(\x05:\x010R\x1bpropagatedModificationDelay\x12N\n\x11replac\
    ement_stops\x18\x04\x20\x03(\x0b2!.transit_realtime.ReplacementStopR\x10\
    replacementStops\x12(\n\x10service_alert_id\x18\x05\x20\x01(\tR\x0eservi\
    ceAlertId\x12,\n\x12last_modified_time\x18\x06\x20\x01(\x04R\x10lastModi\
    fiedTime*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\x1aU\n\rSel\
    ectedTrips\x12\x19\n\x08trip_ids\x18\x01\x20\x03(\tR\x07tripIds\x12\x19\
    \n\x08shape_id\x18\x02\x20\x01(\tR\x07shapeId*\x06\x08\xe8\x07\x10\xd0\
    \x0f*\x06\x08\xa8F\x10\x90N*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\
    \x10\x90N\"\\\n\x0cStopSelector\x12#\n\rstop_sequence\x18\x01\x20\x01(\r\
    R\x0cstopSequence\x12\x17\n\x07stop_id\x18\x02\x20\x01(\tR\x06stopId*\
    \x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xa8F\x10\x90N\"i\n\x0fReplacementS\
    top\x12-\n\x13travel_time_to_stop\x18\x01\x20\x01(\x05R\x10travelTimeToS\
    top\x12\x17\n\x07stop_id\x18\x02\x20\x01(\tR\x06stopId*\x06\x08\xe8\x07\
    \x10\xd0\x0f*\x06\x08\xa8F\x10\x90NB\x1d\n\x1bcom.google.transit.realtim\
    e\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
