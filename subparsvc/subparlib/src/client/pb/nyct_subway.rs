// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `nyct-subway.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq,Clone,Default)]
pub struct TripReplacementPeriod {
    // message fields
    route_id: ::protobuf::SingularField<::std::string::String>,
    replacement_period: ::protobuf::SingularPtrField<super::gtfs_realtime::TimeRange>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TripReplacementPeriod {
    fn default() -> &'a TripReplacementPeriod {
        <TripReplacementPeriod as ::protobuf::Message>::default_instance()
    }
}

impl TripReplacementPeriod {
    pub fn new() -> TripReplacementPeriod {
        ::std::default::Default::default()
    }

    // optional string route_id = 1;


    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .transit_realtime.TimeRange replacement_period = 2;


    pub fn get_replacement_period(&self) -> &super::gtfs_realtime::TimeRange {
        self.replacement_period.as_ref().unwrap_or_else(|| super::gtfs_realtime::TimeRange::default_instance())
    }
    pub fn clear_replacement_period(&mut self) {
        self.replacement_period.clear();
    }

    pub fn has_replacement_period(&self) -> bool {
        self.replacement_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replacement_period(&mut self, v: super::gtfs_realtime::TimeRange) {
        self.replacement_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_replacement_period(&mut self) -> &mut super::gtfs_realtime::TimeRange {
        if self.replacement_period.is_none() {
            self.replacement_period.set_default();
        }
        self.replacement_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_replacement_period(&mut self) -> super::gtfs_realtime::TimeRange {
        self.replacement_period.take().unwrap_or_else(|| super::gtfs_realtime::TimeRange::new())
    }
}

impl ::protobuf::Message for TripReplacementPeriod {
    fn is_initialized(&self) -> bool {
        for v in &self.replacement_period {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.replacement_period)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.replacement_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.replacement_period.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripReplacementPeriod {
        TripReplacementPeriod::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "route_id",
                    |m: &TripReplacementPeriod| { &m.route_id },
                    |m: &mut TripReplacementPeriod| { &mut m.route_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gtfs_realtime::TimeRange>>(
                    "replacement_period",
                    |m: &TripReplacementPeriod| { &m.replacement_period },
                    |m: &mut TripReplacementPeriod| { &mut m.replacement_period },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripReplacementPeriod>(
                    "TripReplacementPeriod",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripReplacementPeriod {
        static mut instance: ::protobuf::lazy::Lazy<TripReplacementPeriod> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TripReplacementPeriod::new)
        }
    }
}

impl ::protobuf::Clear for TripReplacementPeriod {
    fn clear(&mut self) {
        self.route_id.clear();
        self.replacement_period.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripReplacementPeriod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripReplacementPeriod {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NyctFeedHeader {
    // message fields
    nyct_subway_version: ::protobuf::SingularField<::std::string::String>,
    trip_replacement_period: ::protobuf::RepeatedField<TripReplacementPeriod>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NyctFeedHeader {
    fn default() -> &'a NyctFeedHeader {
        <NyctFeedHeader as ::protobuf::Message>::default_instance()
    }
}

impl NyctFeedHeader {
    pub fn new() -> NyctFeedHeader {
        ::std::default::Default::default()
    }

    // required string nyct_subway_version = 1;


    pub fn get_nyct_subway_version(&self) -> &str {
        match self.nyct_subway_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_nyct_subway_version(&mut self) {
        self.nyct_subway_version.clear();
    }

    pub fn has_nyct_subway_version(&self) -> bool {
        self.nyct_subway_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nyct_subway_version(&mut self, v: ::std::string::String) {
        self.nyct_subway_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nyct_subway_version(&mut self) -> &mut ::std::string::String {
        if self.nyct_subway_version.is_none() {
            self.nyct_subway_version.set_default();
        }
        self.nyct_subway_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_nyct_subway_version(&mut self) -> ::std::string::String {
        self.nyct_subway_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .TripReplacementPeriod trip_replacement_period = 2;


    pub fn get_trip_replacement_period(&self) -> &[TripReplacementPeriod] {
        &self.trip_replacement_period
    }
    pub fn clear_trip_replacement_period(&mut self) {
        self.trip_replacement_period.clear();
    }

    // Param is passed by value, moved
    pub fn set_trip_replacement_period(&mut self, v: ::protobuf::RepeatedField<TripReplacementPeriod>) {
        self.trip_replacement_period = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trip_replacement_period(&mut self) -> &mut ::protobuf::RepeatedField<TripReplacementPeriod> {
        &mut self.trip_replacement_period
    }

    // Take field
    pub fn take_trip_replacement_period(&mut self) -> ::protobuf::RepeatedField<TripReplacementPeriod> {
        ::std::mem::replace(&mut self.trip_replacement_period, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NyctFeedHeader {
    fn is_initialized(&self) -> bool {
        if self.nyct_subway_version.is_none() {
            return false;
        }
        for v in &self.trip_replacement_period {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.nyct_subway_version)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.trip_replacement_period)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.nyct_subway_version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.trip_replacement_period {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.nyct_subway_version.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.trip_replacement_period {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NyctFeedHeader {
        NyctFeedHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nyct_subway_version",
                    |m: &NyctFeedHeader| { &m.nyct_subway_version },
                    |m: &mut NyctFeedHeader| { &mut m.nyct_subway_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripReplacementPeriod>>(
                    "trip_replacement_period",
                    |m: &NyctFeedHeader| { &m.trip_replacement_period },
                    |m: &mut NyctFeedHeader| { &mut m.trip_replacement_period },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NyctFeedHeader>(
                    "NyctFeedHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NyctFeedHeader {
        static mut instance: ::protobuf::lazy::Lazy<NyctFeedHeader> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(NyctFeedHeader::new)
        }
    }
}

impl ::protobuf::Clear for NyctFeedHeader {
    fn clear(&mut self) {
        self.nyct_subway_version.clear();
        self.trip_replacement_period.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NyctFeedHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NyctFeedHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NyctTripDescriptor {
    // message fields
    train_id: ::protobuf::SingularField<::std::string::String>,
    is_assigned: ::std::option::Option<bool>,
    direction: ::std::option::Option<NyctTripDescriptor_Direction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NyctTripDescriptor {
    fn default() -> &'a NyctTripDescriptor {
        <NyctTripDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl NyctTripDescriptor {
    pub fn new() -> NyctTripDescriptor {
        ::std::default::Default::default()
    }

    // optional string train_id = 1;


    pub fn get_train_id(&self) -> &str {
        match self.train_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_train_id(&mut self) {
        self.train_id.clear();
    }

    pub fn has_train_id(&self) -> bool {
        self.train_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_train_id(&mut self, v: ::std::string::String) {
        self.train_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_train_id(&mut self) -> &mut ::std::string::String {
        if self.train_id.is_none() {
            self.train_id.set_default();
        }
        self.train_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_train_id(&mut self) -> ::std::string::String {
        self.train_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_assigned = 2;


    pub fn get_is_assigned(&self) -> bool {
        self.is_assigned.unwrap_or(false)
    }
    pub fn clear_is_assigned(&mut self) {
        self.is_assigned = ::std::option::Option::None;
    }

    pub fn has_is_assigned(&self) -> bool {
        self.is_assigned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_assigned(&mut self, v: bool) {
        self.is_assigned = ::std::option::Option::Some(v);
    }

    // optional .NyctTripDescriptor.Direction direction = 3;


    pub fn get_direction(&self) -> NyctTripDescriptor_Direction {
        self.direction.unwrap_or(NyctTripDescriptor_Direction::NORTH)
    }
    pub fn clear_direction(&mut self) {
        self.direction = ::std::option::Option::None;
    }

    pub fn has_direction(&self) -> bool {
        self.direction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: NyctTripDescriptor_Direction) {
        self.direction = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NyctTripDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.train_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_assigned = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.direction, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.train_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.is_assigned {
            my_size += 2;
        }
        if let Some(v) = self.direction {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.train_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.is_assigned {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.direction {
            os.write_enum(3, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NyctTripDescriptor {
        NyctTripDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "train_id",
                    |m: &NyctTripDescriptor| { &m.train_id },
                    |m: &mut NyctTripDescriptor| { &mut m.train_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_assigned",
                    |m: &NyctTripDescriptor| { &m.is_assigned },
                    |m: &mut NyctTripDescriptor| { &mut m.is_assigned },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NyctTripDescriptor_Direction>>(
                    "direction",
                    |m: &NyctTripDescriptor| { &m.direction },
                    |m: &mut NyctTripDescriptor| { &mut m.direction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NyctTripDescriptor>(
                    "NyctTripDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NyctTripDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<NyctTripDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(NyctTripDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for NyctTripDescriptor {
    fn clear(&mut self) {
        self.train_id.clear();
        self.is_assigned = ::std::option::Option::None;
        self.direction = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NyctTripDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NyctTripDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NyctTripDescriptor_Direction {
    NORTH = 1,
    EAST = 2,
    SOUTH = 3,
    WEST = 4,
}

impl ::protobuf::ProtobufEnum for NyctTripDescriptor_Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NyctTripDescriptor_Direction> {
        match value {
            1 => ::std::option::Option::Some(NyctTripDescriptor_Direction::NORTH),
            2 => ::std::option::Option::Some(NyctTripDescriptor_Direction::EAST),
            3 => ::std::option::Option::Some(NyctTripDescriptor_Direction::SOUTH),
            4 => ::std::option::Option::Some(NyctTripDescriptor_Direction::WEST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NyctTripDescriptor_Direction] = &[
            NyctTripDescriptor_Direction::NORTH,
            NyctTripDescriptor_Direction::EAST,
            NyctTripDescriptor_Direction::SOUTH,
            NyctTripDescriptor_Direction::WEST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NyctTripDescriptor_Direction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NyctTripDescriptor_Direction {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for NyctTripDescriptor_Direction {
    fn default() -> Self {
        NyctTripDescriptor_Direction::NORTH
    }
}

impl ::protobuf::reflect::ProtobufValue for NyctTripDescriptor_Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NyctStopTimeUpdate {
    // message fields
    scheduled_track: ::protobuf::SingularField<::std::string::String>,
    actual_track: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NyctStopTimeUpdate {
    fn default() -> &'a NyctStopTimeUpdate {
        <NyctStopTimeUpdate as ::protobuf::Message>::default_instance()
    }
}

impl NyctStopTimeUpdate {
    pub fn new() -> NyctStopTimeUpdate {
        ::std::default::Default::default()
    }

    // optional string scheduled_track = 1;


    pub fn get_scheduled_track(&self) -> &str {
        match self.scheduled_track.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_scheduled_track(&mut self) {
        self.scheduled_track.clear();
    }

    pub fn has_scheduled_track(&self) -> bool {
        self.scheduled_track.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scheduled_track(&mut self, v: ::std::string::String) {
        self.scheduled_track = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheduled_track(&mut self) -> &mut ::std::string::String {
        if self.scheduled_track.is_none() {
            self.scheduled_track.set_default();
        }
        self.scheduled_track.as_mut().unwrap()
    }

    // Take field
    pub fn take_scheduled_track(&mut self) -> ::std::string::String {
        self.scheduled_track.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string actual_track = 2;


    pub fn get_actual_track(&self) -> &str {
        match self.actual_track.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_actual_track(&mut self) {
        self.actual_track.clear();
    }

    pub fn has_actual_track(&self) -> bool {
        self.actual_track.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actual_track(&mut self, v: ::std::string::String) {
        self.actual_track = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_track(&mut self) -> &mut ::std::string::String {
        if self.actual_track.is_none() {
            self.actual_track.set_default();
        }
        self.actual_track.as_mut().unwrap()
    }

    // Take field
    pub fn take_actual_track(&mut self) -> ::std::string::String {
        self.actual_track.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for NyctStopTimeUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.scheduled_track)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.actual_track)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.scheduled_track.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.actual_track.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.scheduled_track.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.actual_track.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NyctStopTimeUpdate {
        NyctStopTimeUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "scheduled_track",
                    |m: &NyctStopTimeUpdate| { &m.scheduled_track },
                    |m: &mut NyctStopTimeUpdate| { &mut m.scheduled_track },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "actual_track",
                    |m: &NyctStopTimeUpdate| { &m.actual_track },
                    |m: &mut NyctStopTimeUpdate| { &mut m.actual_track },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NyctStopTimeUpdate>(
                    "NyctStopTimeUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NyctStopTimeUpdate {
        static mut instance: ::protobuf::lazy::Lazy<NyctStopTimeUpdate> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(NyctStopTimeUpdate::new)
        }
    }
}

impl ::protobuf::Clear for NyctStopTimeUpdate {
    fn clear(&mut self) {
        self.scheduled_track.clear();
        self.actual_track.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NyctStopTimeUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NyctStopTimeUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

pub mod exts {
    use protobuf::Message as Message_imported_for_functions;

    pub const nyct_feed_header: ::protobuf::ext::ExtFieldOptional<super::super::gtfs_realtime::FeedHeader, ::protobuf::types::ProtobufTypeMessage<super::NyctFeedHeader>> = ::protobuf::ext::ExtFieldOptional { field_number: 1001, phantom: ::std::marker::PhantomData };

    pub const nyct_trip_descriptor: ::protobuf::ext::ExtFieldOptional<super::super::gtfs_realtime::TripDescriptor, ::protobuf::types::ProtobufTypeMessage<super::NyctTripDescriptor>> = ::protobuf::ext::ExtFieldOptional { field_number: 1001, phantom: ::std::marker::PhantomData };

    pub const nyct_stop_time_update: ::protobuf::ext::ExtFieldOptional<super::super::gtfs_realtime::TripUpdate_StopTimeUpdate, ::protobuf::types::ProtobufTypeMessage<super::NyctStopTimeUpdate>> = ::protobuf::ext::ExtFieldOptional { field_number: 1001, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11nyct-subway.proto\x1a\x13gtfs-realtime.proto\"~\n\x15TripReplaceme\
    ntPeriod\x12\x19\n\x08route_id\x18\x01\x20\x01(\tR\x07routeId\x12J\n\x12\
    replacement_period\x18\x02\x20\x01(\x0b2\x1b.transit_realtime.TimeRangeR\
    \x11replacementPeriod\"\x90\x01\n\x0eNyctFeedHeader\x12.\n\x13nyct_subwa\
    y_version\x18\x01\x20\x02(\tR\x11nyctSubwayVersion\x12N\n\x17trip_replac\
    ement_period\x18\x02\x20\x03(\x0b2\x16.TripReplacementPeriodR\x15tripRep\
    lacementPeriod\"\xc4\x01\n\x12NyctTripDescriptor\x12\x19\n\x08train_id\
    \x18\x01\x20\x01(\tR\x07trainId\x12\x1f\n\x0bis_assigned\x18\x02\x20\x01\
    (\x08R\nisAssigned\x12;\n\tdirection\x18\x03\x20\x01(\x0e2\x1d.NyctTripD\
    escriptor.DirectionR\tdirection\"5\n\tDirection\x12\t\n\x05NORTH\x10\x01\
    \x12\x08\n\x04EAST\x10\x02\x12\t\n\x05SOUTH\x10\x03\x12\x08\n\x04WEST\
    \x10\x04\"`\n\x12NyctStopTimeUpdate\x12'\n\x0fscheduled_track\x18\x01\
    \x20\x01(\tR\x0escheduledTrack\x12!\n\x0cactual_track\x18\x02\x20\x01(\t\
    R\x0bactualTrack:X\n\x10nyct_feed_header\x18\xe9\x07\x20\x01(\x0b2\x0f.N\
    yctFeedHeader\x12\x1c.transit_realtime.FeedHeaderR\x0enyctFeedHeader:h\n\
    \x14nyct_trip_descriptor\x18\xe9\x07\x20\x01(\x0b2\x13.NyctTripDescripto\
    r\x12\x20.transit_realtime.TripDescriptorR\x12nyctTripDescriptor:t\n\x15\
    nyct_stop_time_update\x18\xe9\x07\x20\x01(\x0b2\x13.NyctStopTimeUpdate\
    \x12+.transit_realtime.TripUpdate.StopTimeUpdateR\x12nyctStopTimeUpdateB\
    \x1d\n\x1bcom.google.transit.realtime\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
